{"ast":null,"code":"import { interpolate, Extrapolation } from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\nimport { cartesian2Polar } from \"./Coordinates\";\nimport { cubicBezierYForX } from \"./Math\";\nexport var serialize = function () {\n  var _f = function _f(path) {\n    return \"M\" + path.move.x + \",\" + path.move.y + \" \" + path.curves.map(function (c) {\n      return \"C\" + c.c1.x + \",\" + c.c1.y + \" \" + c.c2.x + \",\" + c.c2.y + \" \" + c.to.x + \",\" + c.to.y;\n    }).join(\" \") + (path.close ? \"Z\" : \"\");\n  };\n  _f._closure = {};\n  _f.asString = \"function serialize(path){return\\\"M\\\"+path.move.x+\\\",\\\"+path.move.y+\\\" \\\"+path.curves.map(function(c){return\\\"C\\\"+c.c1.x+\\\",\\\"+c.c1.y+\\\" \\\"+c.c2.x+\\\",\\\"+c.c2.y+\\\" \\\"+c.to.x+\\\",\\\"+c.to.y;}).join(\\\" \\\")+(path.close?\\\"Z\\\":\\\"\\\");}\";\n  _f.__workletHash = 6511175714632;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:279)\";\n  return _f;\n}();\nexport var parse = function parse(d) {\n  var segments = normalizeSVG(absSVG(parseSVG(d)));\n  var path = createPath({\n    x: segments[0][1],\n    y: segments[0][2]\n  });\n  segments.forEach(function (segment) {\n    if (segment[0] === \"Z\") {\n      close(path);\n    } else if (segment[0] === \"C\") {\n      addCurve(path, {\n        c1: {\n          x: segment[1],\n          y: segment[2]\n        },\n        c2: {\n          x: segment[3],\n          y: segment[4]\n        },\n        to: {\n          x: segment[5],\n          y: segment[6]\n        }\n      });\n    }\n  });\n  return path;\n};\nexport var interpolatePath = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var extrapolate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Extrapolation.CLAMP;\n    var path = {\n      move: {\n        x: interpolate(value, inputRange, outputRange.map(function (p) {\n          return p.move.x;\n        }), extrapolate),\n        y: interpolate(value, inputRange, outputRange.map(function (p) {\n          return p.move.y;\n        }), extrapolate)\n      },\n      curves: outputRange[0].curves.map(function (_, index) {\n        return {\n          c1: {\n            x: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c1.x;\n            }), extrapolate),\n            y: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c1.y;\n            }), extrapolate)\n          },\n          c2: {\n            x: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c2.x;\n            }), extrapolate),\n            y: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c2.y;\n            }), extrapolate)\n          },\n          to: {\n            x: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].to.x;\n            }), extrapolate),\n            y: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].to.y;\n            }), extrapolate)\n          }\n        };\n      }),\n      close: outputRange[0].close\n    };\n    return serialize(path);\n  };\n  _f._closure = {\n    Extrapolation: {\n      CLAMP: Extrapolation.CLAMP\n    },\n    interpolate: interpolate,\n    serialize: serialize\n  };\n  _f.asString = \"function interpolatePath(value,inputRange,outputRange){const{Extrapolation,interpolate,serialize}=jsThis._closure;{var extrapolate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Extrapolation.CLAMP;var path={move:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.move.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.move.y;}),extrapolate)},curves:outputRange[0].curves.map(function(_,index){return{c1:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c1.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c1.y;}),extrapolate)},c2:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c2.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c2.y;}),extrapolate)},to:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].to.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].to.y;}),extrapolate)}};}),close:outputRange[0].close};return serialize(path);}}\";\n  _f.__workletHash = 4433995105031;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:880)\";\n  return _f;\n}();\nexport var mixPath = function () {\n  var _f = function _f(value, p1, p2) {\n    var extrapolate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Extrapolation.CLAMP;\n    return interpolatePath(value, [0, 1], [p1, p2], extrapolate);\n  };\n  _f._closure = {\n    Extrapolation: {\n      CLAMP: Extrapolation.CLAMP\n    },\n    interpolatePath: interpolatePath\n  };\n  _f.asString = \"function mixPath(value,p1,p2){const{Extrapolation,interpolatePath}=jsThis._closure;{var extrapolate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Extrapolation.CLAMP;return interpolatePath(value,[0,1],[p1,p2],extrapolate);}}\";\n  _f.__workletHash = 9246818204577;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:2005)\";\n  return _f;\n}();\nexport var createPath = function () {\n  var _f = function _f(move) {\n    return {\n      move: move,\n      curves: [],\n      close: false\n    };\n  };\n  _f._closure = {};\n  _f.asString = \"function createPath(move){return{move:move,curves:[],close:false};}\";\n  _f.__workletHash = 14928498416510;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:2219)\";\n  return _f;\n}();\nexport var addArc = function () {\n  var _f = function _f(path, corner, to) {\n    var last = path.curves[path.curves.length - 1];\n    var from = last ? last.to : path.move;\n    var arc = 9 / 16;\n    path.curves.push({\n      c1: {\n        x: (corner.x - from.x) * arc + from.x,\n        y: (corner.y - from.y) * arc + from.y\n      },\n      c2: {\n        x: (corner.x - to.x) * arc + to.x,\n        y: (corner.y - to.y) * arc + to.y\n      },\n      to: to\n    });\n  };\n  _f._closure = {};\n  _f.asString = \"function addArc(path,corner,to){var last=path.curves[path.curves.length-1];var from=last?last.to:path.move;var arc=9/16;path.curves.push({c1:{x:(corner.x-from.x)*arc+from.x,y:(corner.y-from.y)*arc+from.y},c2:{x:(corner.x-to.x)*arc+to.x,y:(corner.y-to.y)*arc+to.y},to:to});}\";\n  _f.__workletHash = 7717658052260;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:2315)\";\n  return _f;\n}();\nexport var addCurve = function () {\n  var _f = function _f(path, c) {\n    path.curves.push({\n      c1: c.c1,\n      c2: c.c2,\n      to: c.to\n    });\n  };\n  _f._closure = {};\n  _f.asString = \"function addCurve(path,c){path.curves.push({c1:c.c1,c2:c.c2,to:c.to});}\";\n  _f.__workletHash = 12524308058506;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:2619)\";\n  return _f;\n}();\nexport var addLine = function () {\n  var _f = function _f(path, to) {\n    var last = path.curves[path.curves.length - 1];\n    var from = last ? last.to : path.move;\n    path.curves.push({\n      c1: from,\n      c2: to,\n      to: to\n    });\n  };\n  _f._closure = {};\n  _f.asString = \"function addLine(path,to){var last=path.curves[path.curves.length-1];var from=last?last.to:path.move;path.curves.push({c1:from,c2:to,to:to});}\";\n  _f.__workletHash = 4466488744766;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:2720)\";\n  return _f;\n}();\nexport var addQuadraticCurve = function () {\n  var _f = function _f(path, cp, to) {\n    var last = path.curves[path.curves.length - 1];\n    var from = last ? last.to : path.move;\n    path.curves.push({\n      c1: {\n        x: from.x / 3 + 2 / 3 * cp.x,\n        y: from.y / 3 + 2 / 3 * cp.y\n      },\n      c2: {\n        x: to.x / 3 + 2 / 3 * cp.x,\n        y: to.y / 3 + 2 / 3 * cp.y\n      },\n      to: to\n    });\n  };\n  _f._closure = {};\n  _f.asString = \"function addQuadraticCurve(path,cp,to){var last=path.curves[path.curves.length-1];var from=last?last.to:path.move;path.curves.push({c1:{x:from.x/3+2/3*cp.x,y:from.y/3+2/3*cp.y},c2:{x:to.x/3+2/3*cp.x,y:to.y/3+2/3*cp.y},to:to});}\";\n  _f.__workletHash = 15214855098425;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:2902)\";\n  return _f;\n}();\nexport var close = function () {\n  var _f = function _f(path) {\n    path.close = true;\n  };\n  _f._closure = {};\n  _f.asString = \"function close(path){path.close=true;}\";\n  _f.__workletHash = 6388902332060;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:3157)\";\n  return _f;\n}();\nvar curveIsFound = function () {\n  var _f = function _f(c) {\n    return c.curve !== null;\n  };\n  _f._closure = {};\n  _f.asString = \"function curveIsFound(c){return c.curve!==null;}\";\n  _f.__workletHash = 16087677445003;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:3223)\";\n  return _f;\n}();\nexport var selectCurve = function () {\n  var _f = function _f(path, x) {\n    var result = {\n      from: path.move,\n      curve: null\n    };\n    for (var i = 0; i < path.curves.length; i++) {\n      var c = path.curves[i];\n      var contains = result.from.x > c.to.x ? x >= c.to.x && x <= result.from.x : x >= result.from.x && x <= c.to.x;\n      if (contains) {\n        result.curve = c;\n        break;\n      }\n      result.from = c.to;\n    }\n    if (!curveIsFound(result)) {\n      return null;\n    }\n    return result;\n  };\n  _f._closure = {\n    curveIsFound: curveIsFound\n  };\n  _f.asString = \"function selectCurve(path,x){const{curveIsFound}=jsThis._closure;{var result={from:path.move,curve:null};for(var i=0;i<path.curves.length;i++){var c=path.curves[i];var contains=result.from.x>c.to.x?x>=c.to.x&&x<=result.from.x:x>=result.from.x&&x<=c.to.x;if(contains){result.curve=c;break;}result.from=c.to;}if(!curveIsFound(result)){return null;}return result;}}\";\n  _f.__workletHash = 9727387309432;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:3305)\";\n  return _f;\n}();\nexport var getYForX = function () {\n  var _f = function _f(path, x) {\n    var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    var c = selectCurve(path, x);\n    if (c === null) {\n      return null;\n    }\n    return cubicBezierYForX(x, c.from, c.curve.c1, c.curve.c2, c.curve.to, precision);\n  };\n  _f._closure = {\n    selectCurve: selectCurve,\n    cubicBezierYForX: cubicBezierYForX\n  };\n  _f.asString = \"function getYForX(path,x){const{selectCurve,cubicBezierYForX}=jsThis._closure;{var precision=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;var c=selectCurve(path,x);if(c===null){return null;}return cubicBezierYForX(x,c.from,c.curve.c1,c.curve.c2,c.curve.to,precision);}}\";\n  _f.__workletHash = 13044703911450;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:3660)\";\n  return _f;\n}();\nvar controlPoint = function () {\n  var _f = function _f(current, previous, next, reverse, smoothing) {\n    var p = previous || current;\n    var n = next || current;\n    var lengthX = n.x - p.x;\n    var lengthY = n.y - p.y;\n    var o = cartesian2Polar({\n      x: lengthX,\n      y: lengthY\n    });\n    var angle = o.theta + (reverse ? Math.PI : 0);\n    var length = o.radius * smoothing;\n    var x = current.x + Math.cos(angle) * length;\n    var y = current.y + Math.sin(angle) * length;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  _f._closure = {\n    cartesian2Polar: cartesian2Polar\n  };\n  _f.asString = \"function controlPoint(current,previous,next,reverse,smoothing){const{cartesian2Polar}=jsThis._closure;{var p=previous||current;var n=next||current;var lengthX=n.x-p.x;var lengthY=n.y-p.y;var o=cartesian2Polar({x:lengthX,y:lengthY});var angle=o.theta+(reverse?Math.PI:0);var length=o.radius*smoothing;var x=current.x+Math.cos(angle)*length;var y=current.y+Math.sin(angle)*length;return{x:x,y:y};}}\";\n  _f.__workletHash = 6183874827311;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:3918)\";\n  return _f;\n}();\nvar exhaustiveCheck = function exhaustiveCheck(a) {\n  throw new Error(\"Unexhaustive handling for \" + a);\n};\nexport var curveLines = function () {\n  var _f = function _f(points, smoothing, strategy) {\n    var path = createPath(points[0]);\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        continue;\n      }\n      var point = points[i];\n      var next = points[i + 1];\n      var prev = points[i - 1];\n      var cps = controlPoint(prev, points[i - 2], point, false, smoothing);\n      var cpe = controlPoint(point, prev, next, true, smoothing);\n      switch (strategy) {\n        case \"simple\":\n          var cp = {\n            x: (cps.x + cpe.x) / 2,\n            y: (cps.y + cpe.y) / 2\n          };\n          addQuadraticCurve(path, cp, point);\n          break;\n        case \"bezier\":\n          var p0 = points[i - 2] || prev;\n          var p1 = points[i - 1];\n          var cp1x = (2 * p0.x + p1.x) / 3;\n          var cp1y = (2 * p0.y + p1.y) / 3;\n          var cp2x = (p0.x + 2 * p1.x) / 3;\n          var cp2y = (p0.y + 2 * p1.y) / 3;\n          var cp3x = (p0.x + 4 * p1.x + point.x) / 6;\n          var cp3y = (p0.y + 4 * p1.y + point.y) / 6;\n          path.curves.push({\n            c1: {\n              x: cp1x,\n              y: cp1y\n            },\n            c2: {\n              x: cp2x,\n              y: cp2y\n            },\n            to: {\n              x: cp3x,\n              y: cp3y\n            }\n          });\n          if (i === points.length - 1) {\n            path.curves.push({\n              to: points[points.length - 1],\n              c1: points[points.length - 1],\n              c2: points[points.length - 1]\n            });\n          }\n          break;\n        case \"complex\":\n          path.curves.push({\n            to: point,\n            c1: cps,\n            c2: cpe\n          });\n          break;\n        default:\n          exhaustiveCheck(strategy);\n      }\n    }\n    return path;\n  };\n  _f._closure = {\n    createPath: createPath,\n    controlPoint: controlPoint,\n    addQuadraticCurve: addQuadraticCurve,\n    exhaustiveCheck: exhaustiveCheck\n  };\n  _f.asString = \"function curveLines(points,smoothing,strategy){const{createPath,controlPoint,addQuadraticCurve,exhaustiveCheck}=jsThis._closure;{var path=createPath(points[0]);for(var i=0;i<points.length;i++){if(i===0){continue;}var point=points[i];var next=points[i+1];var prev=points[i-1];var cps=controlPoint(prev,points[i-2],point,false,smoothing);var cpe=controlPoint(point,prev,next,true,smoothing);switch(strategy){case\\\"simple\\\":var cp={x:(cps.x+cpe.x)/2,y:(cps.y+cpe.y)/2};addQuadraticCurve(path,cp,point);break;case\\\"bezier\\\":var p0=points[i-2]||prev;var p1=points[i-1];var cp1x=(2*p0.x+p1.x)/3;var cp1y=(2*p0.y+p1.y)/3;var cp2x=(p0.x+2*p1.x)/3;var cp2y=(p0.y+2*p1.y)/3;var cp3x=(p0.x+4*p1.x+point.x)/6;var cp3y=(p0.y+4*p1.y+point.y)/6;path.curves.push({c1:{x:cp1x,y:cp1y},c2:{x:cp2x,y:cp2y},to:{x:cp3x,y:cp3y}});if(i===points.length-1){path.curves.push({to:points[points.length-1],c1:points[points.length-1],c2:points[points.length-1]});}break;case\\\"complex\\\":path.curves.push({to:point,c1:cps,c2:cpe});break;default:exhaustiveCheck(strategy);}}return path;}}\";\n  _f.__workletHash = 4521352181802;\n  _f.__location = \"/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.js (1:4404)\";\n  return _f;\n}();","map":{"version":3,"names":["interpolate","Extrapolation","parseSVG","absSVG","normalizeSVG","cartesian2Polar","cubicBezierYForX","serialize","_f","path","move","x","y","curves","map","c","c1","c2","to","join","close","_closure","asString","__workletHash","__location","parse","d","segments","createPath","forEach","segment","addCurve","interpolatePath","value","inputRange","outputRange","extrapolate","arguments","length","undefined","CLAMP","p","_","index","mixPath","p1","p2","addArc","corner","last","from","arc","push","addLine","addQuadraticCurve","cp","curveIsFound","curve","selectCurve","result","i","contains","getYForX","precision","controlPoint","current","previous","next","reverse","smoothing","n","lengthX","lengthY","o","angle","theta","Math","PI","radius","cos","sin","exhaustiveCheck","a","Error","curveLines","points","strategy","point","prev","cps","cpe","p0","cp1x","cp1y","cp2x","cp2y","cp3x","cp3y"],"sources":["/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/node_modules/react-native-redash/lib/module/Paths.ts"],"sourcesContent":["import { interpolate, Extrapolation } from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\n\nimport type { Vector } from \"./Vectors\";\nimport { cartesian2Polar } from \"./Coordinates\";\nimport { cubicBezierYForX } from \"./Math\";\n\ntype SVGCloseCommand = [\"Z\"];\ntype SVGMoveCommand = [\"M\", number, number];\ntype SVGCurveCommand = [\"C\", number, number, number, number, number, number];\ntype SVGNormalizedCommands = [\n  SVGMoveCommand,\n  ...(SVGCurveCommand | SVGCloseCommand)[]\n];\n\ninterface Curve {\n  to: Vector;\n  c1: Vector;\n  c2: Vector;\n}\n\nexport type Path = {\n  move: Vector;\n  curves: Curve[];\n  close: boolean;\n};\n\n/**\n * @summary Serialize a path into an SVG path string\n * @worklet\n */\nexport const serialize = (path: Path) => {\n  \"worklet\";\n  return `M${path.move.x},${path.move.y} ${path.curves\n    .map((c) => `C${c.c1.x},${c.c1.y} ${c.c2.x},${c.c2.y} ${c.to.x},${c.to.y}`)\n    .join(\" \")}${path.close ? \"Z\" : \"\"}`;\n};\n\n/**\n * @description ⚠️ this function cannot run on the UI thread. It must be executed on the JS thread\n * @summary Parse an SVG path into a sequence of Bèzier curves.\n * The SVG is normalized to have absolute values and to be approximated to a sequence of Bèzier curves.\n */\nexport const parse = (d: string): Path => {\n  const segments: SVGNormalizedCommands = normalizeSVG(absSVG(parseSVG(d)));\n  const path = createPath({ x: segments[0][1], y: segments[0][2] });\n  segments.forEach((segment) => {\n    if (segment[0] === \"Z\") {\n      close(path);\n    } else if (segment[0] === \"C\") {\n      addCurve(path, {\n        c1: {\n          x: segment[1],\n          y: segment[2],\n        },\n        c2: {\n          x: segment[3],\n          y: segment[4],\n        },\n        to: {\n          x: segment[5],\n          y: segment[6],\n        },\n      });\n    }\n  });\n  return path;\n};\n\n/**\n * @summary Interpolate between paths.\n * @worklet\n */\nexport const interpolatePath = (\n  value: number,\n  inputRange: number[],\n  outputRange: Path[],\n  extrapolate = Extrapolation.CLAMP\n) => {\n  \"worklet\";\n  const path = {\n    move: {\n      x: interpolate(\n        value,\n        inputRange,\n        outputRange.map((p) => p.move.x),\n        extrapolate\n      ),\n      y: interpolate(\n        value,\n        inputRange,\n        outputRange.map((p) => p.move.y),\n        extrapolate\n      ),\n    },\n    curves: outputRange[0].curves.map((_, index) => ({\n      c1: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c1.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c1.y),\n          extrapolate\n        ),\n      },\n      c2: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c2.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c2.y),\n          extrapolate\n        ),\n      },\n      to: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].to.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].to.y),\n          extrapolate\n        ),\n      },\n    })),\n    close: outputRange[0].close,\n  };\n  return serialize(path);\n};\n\n/**\n * @summary Interpolate two paths with an animation value that goes from 0 to 1\n * @worklet\n */\nexport const mixPath = (\n  value: number,\n  p1: Path,\n  p2: Path,\n  extrapolate = Extrapolation.CLAMP\n) => {\n  \"worklet\";\n  return interpolatePath(value, [0, 1], [p1, p2], extrapolate);\n};\n\n/**\n * @summary Create a new path\n * @worklet\n */\nexport const createPath = (move: Vector): Path => {\n  \"worklet\";\n  return {\n    move,\n    curves: [],\n    close: false,\n  };\n};\n\n/**\n * @summary Add an arc command to a path\n * @worklet\n */\nexport const addArc = (path: Path, corner: Vector, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  const arc = 9 / 16;\n  path.curves.push({\n    c1: {\n      x: (corner.x - from.x) * arc + from.x,\n      y: (corner.y - from.y) * arc + from.y,\n    },\n    c2: {\n      x: (corner.x - to.x) * arc + to.x,\n      y: (corner.y - to.y) * arc + to.y,\n    },\n    to,\n  });\n};\n\n/**\n * @summary Add a cubic Bèzier curve command to a path.\n * @worklet\n */\nexport const addCurve = (path: Path, c: Curve) => {\n  \"worklet\";\n  path.curves.push({\n    c1: c.c1,\n    c2: c.c2,\n    to: c.to,\n  });\n};\n\n/**\n * @summary Add a line command to a path.\n * @worklet\n */\nexport const addLine = (path: Path, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  path.curves.push({\n    c1: from,\n    c2: to,\n    to,\n  });\n};\n\n/**\n * @summary Add a quadratic Bèzier curve command to a path.\n * @worklet\n */\nexport const addQuadraticCurve = (path: Path, cp: Vector, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  path.curves.push({\n    c1: {\n      x: from.x / 3 + (2 / 3) * cp.x,\n      y: from.y / 3 + (2 / 3) * cp.y,\n    },\n    c2: {\n      x: to.x / 3 + (2 / 3) * cp.x,\n      y: to.y / 3 + (2 / 3) * cp.y,\n    },\n    to,\n  });\n};\n\n/**\n * @summary Add a close command to a path.\n * @worklet\n */\nexport const close = (path: Path) => {\n  \"worklet\";\n  path.close = true;\n};\n\ninterface SelectedCurve {\n  from: Vector;\n  curve: Curve;\n}\n\ninterface NullableSelectedCurve {\n  from: Vector;\n  curve: Curve | null;\n}\n\n/**\n * @worklet\n */\nconst curveIsFound = (c: NullableSelectedCurve): c is SelectedCurve => {\n  \"worklet\";\n  return c.curve !== null;\n};\n\n/**\n * @summary Return the curves at x. This function assumes that only one curve is available at x\n * @worklet\n */\nexport const selectCurve = (path: Path, x: number): SelectedCurve | null => {\n  \"worklet\";\n  const result: NullableSelectedCurve = {\n    from: path.move,\n    curve: null,\n  };\n  for (let i = 0; i < path.curves.length; i++) {\n    const c = path.curves[i];\n    const contains =\n      result.from.x > c.to.x\n        ? x >= c.to.x && x <= result.from.x\n        : x >= result.from.x && x <= c.to.x;\n    if (contains) {\n      result.curve = c;\n      break;\n    }\n    result.from = c.to;\n  }\n  if (!curveIsFound(result)) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * @summary Return the y value of a path given its x coordinate\n * @example\n    const p1 = parse(\n      \"M150,0 C150,0 0,75 200,75 C75,200 200,225 200,225 C225,200 200,150 0,150\"\n    );\n    // 75\n    getYForX(p1, 200))\n    // ~151\n    getYForX(p1, 50)\n * @worklet\n */\nexport const getYForX = (path: Path, x: number, precision = 2) => {\n  \"worklet\";\n  const c = selectCurve(path, x);\n  if (c === null) {\n    return null;\n  }\n  return cubicBezierYForX(\n    x,\n    c.from,\n    c.curve.c1,\n    c.curve.c2,\n    c.curve.to,\n    precision\n  );\n};\n\nconst controlPoint = (\n  current: Vector,\n  previous: Vector,\n  next: Vector,\n  reverse: boolean,\n  smoothing: number\n) => {\n  \"worklet\";\n  const p = previous || current;\n  const n = next || current;\n  // Properties of the opposed-line\n  const lengthX = n.x - p.x;\n  const lengthY = n.y - p.y;\n\n  const o = cartesian2Polar({ x: lengthX, y: lengthY });\n  // If is end-control-point, add PI to the angle to go backward\n  const angle = o.theta + (reverse ? Math.PI : 0);\n  const length = o.radius * smoothing;\n  // The control point position is relative to the current point\n  const x = current.x + Math.cos(angle) * length;\n  const y = current.y + Math.sin(angle) * length;\n  return { x, y };\n};\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\n/**\n * @summary Link points via a smooth cubic Bézier curves\n * from https://github.com/rainbow-me/rainbow\n * @worklet\n */\nexport const curveLines = (\n  points: Vector<number>[],\n  smoothing: number,\n  strategy: \"complex\" | \"bezier\" | \"simple\"\n) => {\n  \"worklet\";\n  const path = createPath(points[0]);\n  // build the d attributes by looping over the points\n  for (let i = 0; i < points.length; i++) {\n    if (i === 0) {\n      continue;\n    }\n    const point = points[i];\n    const next = points[i + 1];\n    const prev = points[i - 1];\n    const cps = controlPoint(prev, points[i - 2], point, false, smoothing);\n    const cpe = controlPoint(point, prev, next, true, smoothing);\n    switch (strategy) {\n      case \"simple\":\n        const cp = {\n          x: (cps.x + cpe.x) / 2,\n          y: (cps.y + cpe.y) / 2,\n        };\n        addQuadraticCurve(path, cp, point);\n        break;\n      case \"bezier\":\n        const p0 = points[i - 2] || prev;\n        const p1 = points[i - 1];\n        const cp1x = (2 * p0.x + p1.x) / 3;\n        const cp1y = (2 * p0.y + p1.y) / 3;\n        const cp2x = (p0.x + 2 * p1.x) / 3;\n        const cp2y = (p0.y + 2 * p1.y) / 3;\n        const cp3x = (p0.x + 4 * p1.x + point.x) / 6;\n        const cp3y = (p0.y + 4 * p1.y + point.y) / 6;\n        path.curves.push({\n          c1: { x: cp1x, y: cp1y },\n          c2: { x: cp2x, y: cp2y },\n          to: { x: cp3x, y: cp3y },\n        });\n        if (i === points.length - 1) {\n          path.curves.push({\n            to: points[points.length - 1],\n            c1: points[points.length - 1],\n            c2: points[points.length - 1],\n          });\n        }\n        break;\n      case \"complex\":\n        path.curves.push({\n          to: point,\n          c1: cps,\n          c2: cpe,\n        });\n        break;\n      default:\n        exhaustiveCheck(strategy);\n    }\n  }\n  return path;\n};\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,QAA2C,yBAA3C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAGA,SAASC,eAAT;AACA,SAASC,gBAAT;AA0BA,OAAO,IAAMC,SAAS;EAAA,IAAAC,EAAA,YAAAA,GAAIC,IAAD,EAAgB;IAEvC,aAAWA,IAAI,CAACC,IAAL,CAAUC,CAArB,SAA0BF,IAAI,CAACC,IAAL,CAAUE,CAApC,SAAyCH,IAAI,CAACI,MAAL,CACtCC,GADsC,CAClC,UAACC,CAAD;MAAA,aAAWA,CAAC,CAACC,EAAF,CAAKL,CAAhB,SAAqBI,CAAC,CAACC,EAAF,CAAKJ,CAA1B,SAA+BG,CAAC,CAACE,EAAF,CAAKN,CAApC,SAAyCI,CAAC,CAACE,EAAF,CAAKL,CAA9C,SAAmDG,CAAC,CAACG,EAAF,CAAKP,CAAxD,SAA6DI,CAAC,CAACG,EAAF,CAAKN,CAAlE;IAAA,CADkC,EAEtCO,IAFsC,CAEjC,GAFiC,CAAzC,IAEeV,IAAI,CAACW,KAAL,GAAa,GAAb,GAAmB,EAFlC;EAGD,CALM;EAAAZ,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAYP,OAAO,IAAMiB,KAAK,GAAG,SAARA,KAAQA,CAACC,CAAD,EAAqB;EACxC,IAAMC,QAA+B,GAAGvB,YAAY,CAACD,MAAM,CAACD,QAAQ,CAACwB,CAAD,CAAT,CAAP,CAApD;EACA,IAAMjB,IAAI,GAAGmB,UAAU,CAAC;IAAEjB,CAAC,EAAEgB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAL;IAAqBf,CAAC,EAAEe,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ;EAAxB,CAAD,CAAvB;EACAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;IAC5B,IAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;MACtBV,KAAK,CAACX,IAAD,CAAL;IACD,CAFD,MAEO,IAAIqB,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;MAC7BC,QAAQ,CAACtB,IAAD,EAAO;QACbO,EAAE,EAAE;UACFL,CAAC,EAAEmB,OAAO,CAAC,CAAD,CADR;UAEFlB,CAAC,EAAEkB,OAAO,CAAC,CAAD;QAFR,CADS;QAKbb,EAAE,EAAE;UACFN,CAAC,EAAEmB,OAAO,CAAC,CAAD,CADR;UAEFlB,CAAC,EAAEkB,OAAO,CAAC,CAAD;QAFR,CALS;QASbZ,EAAE,EAAE;UACFP,CAAC,EAAEmB,OAAO,CAAC,CAAD,CADR;UAEFlB,CAAC,EAAEkB,OAAO,CAAC,CAAD;QAFR;MATS,CAAP,CAAR;IAcD;EACF,CAnBD;EAoBA,OAAOrB,IAAP;AACD,CAxBM;AA8BP,OAAO,IAAMuB,eAAe;EAAA,IAAAxB,EAAA,YAAAA,GAC1ByB,KAD6B,EAE7BC,UAF6B,EAG7BC,WAH6B,EAK1B;IAAA,IADHC,WACG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADWpC,aAAa,CAACuC,KACzB;IAEH,IAAM/B,IAAI,GAAG;MACXC,IAAI,EAAE;QACJC,CAAC,EAAEX,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;UAAA,OAAOA,CAAC,CAAC/B,IAAF,CAAOC,CAAd;QAAA,CAAhB,CAHY,EAIZyB,WAJY,CADV;QAOJxB,CAAC,EAAEZ,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;UAAA,OAAOA,CAAC,CAAC/B,IAAF,CAAOE,CAAd;QAAA,CAAhB,CAHY,EAIZwB,WAJY;MAPV,CADK;MAeXvB,MAAM,EAAEsB,WAAW,CAAC,CAAD,CAAX,CAAetB,MAAf,CAAsBC,GAAtB,CAA0B,UAAC4B,CAAD,EAAIC,KAAJ;QAAA,OAAe;UAC/C3B,EAAE,EAAE;YACFL,CAAC,EAAEX,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;cAAA,OAAOA,CAAC,CAAC5B,MAAF,CAAS8B,KAAT,EAAgB3B,EAAhB,CAAmBL,CAA1B;YAAA,CAAhB,CAHY,EAIZyB,WAJY,CADZ;YAOFxB,CAAC,EAAEZ,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;cAAA,OAAOA,CAAC,CAAC5B,MAAF,CAAS8B,KAAT,EAAgB3B,EAAhB,CAAmBJ,CAA1B;YAAA,CAAhB,CAHY,EAIZwB,WAJY;UAPZ,CAD2C;UAe/CnB,EAAE,EAAE;YACFN,CAAC,EAAEX,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;cAAA,OAAOA,CAAC,CAAC5B,MAAF,CAAS8B,KAAT,EAAgB1B,EAAhB,CAAmBN,CAA1B;YAAA,CAAhB,CAHY,EAIZyB,WAJY,CADZ;YAOFxB,CAAC,EAAEZ,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;cAAA,OAAOA,CAAC,CAAC5B,MAAF,CAAS8B,KAAT,EAAgB1B,EAAhB,CAAmBL,CAA1B;YAAA,CAAhB,CAHY,EAIZwB,WAJY;UAPZ,CAf2C;UA6B/ClB,EAAE,EAAE;YACFP,CAAC,EAAEX,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;cAAA,OAAOA,CAAC,CAAC5B,MAAF,CAAS8B,KAAT,EAAgBzB,EAAhB,CAAmBP,CAA1B;YAAA,CAAhB,CAHY,EAIZyB,WAJY,CADZ;YAOFxB,CAAC,EAAEZ,WAAW,CACZiC,KADY,EAEZC,UAFY,EAGZC,WAAW,CAACrB,GAAZ,CAAgB,UAAC2B,CAAD;cAAA,OAAOA,CAAC,CAAC5B,MAAF,CAAS8B,KAAT,EAAgBzB,EAAhB,CAAmBN,CAA1B;YAAA,CAAhB,CAHY,EAIZwB,WAJY;UAPZ;QA7B2C,CAAf;MAAA,CAA1B,CAfG;MA2DXhB,KAAK,EAAEe,WAAW,CAAC,CAAD,CAAX,CAAef;IA3DX,CAAb;IA6DA,OAAOb,SAAS,CAACE,IAAD,CAAhB;EACD,CArEM;EAAAD,EAAA,CAAAa,QAAA;IAAApB,aAAA;MAAAuC,KAAA,E;;;;;;;;;GAAA;AA2EP,OAAO,IAAMI,OAAO;EAAA,IAAApC,EAAA,YAAAA,GAClByB,KADqB,EAErBY,EAFqB,EAGrBC,EAHqB,EAKlB;IAAA,IADHV,WACG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADWpC,aAAa,CAACuC,KACzB;IAEH,OAAOR,eAAe,CAACC,KAAD,EAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR,EAAgB,CAACY,EAAD,EAAKC,EAAL,CAAhB,EAA0BV,WAA1B,CAAtB;EACD,CARM;EAAA5B,EAAA,CAAAa,QAAA;IAAApB,aAAA;MAAAuC,KAAA,E;;;;;;;;GAAA;AAcP,OAAO,IAAMZ,UAAU;EAAA,IAAApB,EAAA,YAAAA,GAAIE,IAAD,EAAwB;IAEhD,OAAO;MACLA,IAAI,EAAJA,IADK;MAELG,MAAM,EAAE,EAFH;MAGLO,KAAK,EAAE;IAHF,CAAP;EAKD,CAPM;EAAAZ,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAaP,OAAO,IAAMuC,MAAM;EAAA,IAAAvC,EAAA,YAAAA,GAAIC,IAAD,EAAauC,MAAb,EAA6B9B,EAA7B,EAA4C;IAEhE,IAAM+B,IAAI,GAAGxC,IAAI,CAACI,MAAL,CAAYJ,IAAI,CAACI,MAAL,CAAYyB,MAAZ,GAAqB,CAAjC,CAAb;IACA,IAAMY,IAAI,GAAGD,IAAI,GAAGA,IAAI,CAAC/B,EAAR,GAAaT,IAAI,CAACC,IAAnC;IACA,IAAMyC,GAAG,GAAG,IAAI,EAAhB;IACA1C,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;MACfpC,EAAE,EAAE;QACFL,CAAC,EAAE,CAACqC,MAAM,CAACrC,CAAP,GAAWuC,IAAI,CAACvC,CAAjB,IAAsBwC,GAAtB,GAA4BD,IAAI,CAACvC,CADlC;QAEFC,CAAC,EAAE,CAACoC,MAAM,CAACpC,CAAP,GAAWsC,IAAI,CAACtC,CAAjB,IAAsBuC,GAAtB,GAA4BD,IAAI,CAACtC;MAFlC,CADW;MAKfK,EAAE,EAAE;QACFN,CAAC,EAAE,CAACqC,MAAM,CAACrC,CAAP,GAAWO,EAAE,CAACP,CAAf,IAAoBwC,GAApB,GAA0BjC,EAAE,CAACP,CAD9B;QAEFC,CAAC,EAAE,CAACoC,MAAM,CAACpC,CAAP,GAAWM,EAAE,CAACN,CAAf,IAAoBuC,GAApB,GAA0BjC,EAAE,CAACN;MAF9B,CALW;MASfM,EAAE,EAAFA;IATe,CAAjB;EAWD,CAhBM;EAAAV,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAsBP,OAAO,IAAMuB,QAAQ;EAAA,IAAAvB,EAAA,YAAAA,GAAIC,IAAD,EAAaM,CAAb,EAA0B;IAEhDN,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;MACfpC,EAAE,EAAED,CAAC,CAACC,EADS;MAEfC,EAAE,EAAEF,CAAC,CAACE,EAFS;MAGfC,EAAE,EAAEH,CAAC,CAACG;IAHS,CAAjB;EAKD,CAPM;EAAAV,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAaP,OAAO,IAAM6C,OAAO;EAAA,IAAA7C,EAAA,YAAAA,GAAIC,IAAD,EAAaS,EAAb,EAA4B;IAEjD,IAAM+B,IAAI,GAAGxC,IAAI,CAACI,MAAL,CAAYJ,IAAI,CAACI,MAAL,CAAYyB,MAAZ,GAAqB,CAAjC,CAAb;IACA,IAAMY,IAAI,GAAGD,IAAI,GAAGA,IAAI,CAAC/B,EAAR,GAAaT,IAAI,CAACC,IAAnC;IACAD,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;MACfpC,EAAE,EAAEkC,IADW;MAEfjC,EAAE,EAAEC,EAFW;MAGfA,EAAE,EAAFA;IAHe,CAAjB;EAKD,CATM;EAAAV,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAeP,OAAO,IAAM8C,iBAAiB;EAAA,IAAA9C,EAAA,YAAAA,GAAIC,IAAD,EAAa8C,EAAb,EAAyBrC,EAAzB,EAAwC;IAEvE,IAAM+B,IAAI,GAAGxC,IAAI,CAACI,MAAL,CAAYJ,IAAI,CAACI,MAAL,CAAYyB,MAAZ,GAAqB,CAAjC,CAAb;IACA,IAAMY,IAAI,GAAGD,IAAI,GAAGA,IAAI,CAAC/B,EAAR,GAAaT,IAAI,CAACC,IAAnC;IACAD,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;MACfpC,EAAE,EAAE;QACFL,CAAC,EAAEuC,IAAI,CAACvC,CAAL,GAAS,CAAT,GAAc,IAAI,CAAL,GAAU4C,EAAE,CAAC5C,CAD3B;QAEFC,CAAC,EAAEsC,IAAI,CAACtC,CAAL,GAAS,CAAT,GAAc,IAAI,CAAL,GAAU2C,EAAE,CAAC3C;MAF3B,CADW;MAKfK,EAAE,EAAE;QACFN,CAAC,EAAEO,EAAE,CAACP,CAAH,GAAO,CAAP,GAAY,IAAI,CAAL,GAAU4C,EAAE,CAAC5C,CADzB;QAEFC,CAAC,EAAEM,EAAE,CAACN,CAAH,GAAO,CAAP,GAAY,IAAI,CAAL,GAAU2C,EAAE,CAAC3C;MAFzB,CALW;MASfM,EAAE,EAAFA;IATe,CAAjB;EAWD,CAfM;EAAAV,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAqBP,OAAO,IAAMY,KAAK;EAAA,IAAAZ,EAAA,YAAAA,GAAIC,IAAD,EAAgB;IAEnCA,IAAI,CAACW,KAAL,GAAa,IAAb;EACD,CAHM;EAAAZ,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AAkBP,IAAMgD,YAAY;EAAA,IAAAhD,EAAA,YAAAA,GAAIO,CAAD,EAAkD;IAErE,OAAOA,CAAC,CAAC0C,KAAF,KAAY,IAAnB;EACD,CAHD;EAAAjD,EAAA,CAAAa,QAAA;EAAAb,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,aAAA;EAAAf,EAAA,CAAAgB,UAAA;EAAA,OAAAhB,EAAA;AAAA;AASA,OAAO,IAAMkD,WAAW;EAAA,IAAAlD,EAAA,YAAAA,GAAIC,IAAD,EAAaE,CAAb,EAAiD;IAE1E,IAAMgD,MAA6B,GAAG;MACpCT,IAAI,EAAEzC,IAAI,CAACC,IADyB;MAEpC+C,KAAK,EAAE;IAF6B,CAAtC;IAIA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnD,IAAI,CAACI,MAAL,CAAYyB,MAAhC,EAAwCsB,CAAC,EAAzC,EAA6C;MAC3C,IAAM7C,CAAC,GAAGN,IAAI,CAACI,MAAL,CAAY+C,CAAZ,CAAV;MACA,IAAMC,QAAQ,GACZF,MAAM,CAACT,IAAP,CAAYvC,CAAZ,GAAgBI,CAAC,CAACG,EAAF,CAAKP,CAArB,GACIA,CAAC,IAAII,CAAC,CAACG,EAAF,CAAKP,CAAV,IAAeA,CAAC,IAAIgD,MAAM,CAACT,IAAP,CAAYvC,CADpC,GAEIA,CAAC,IAAIgD,MAAM,CAACT,IAAP,CAAYvC,CAAjB,IAAsBA,CAAC,IAAII,CAAC,CAACG,EAAF,CAAKP,CAHtC;MAIA,IAAIkD,QAAJ,EAAc;QACZF,MAAM,CAACF,KAAP,GAAe1C,CAAf;QACA;MACD;MACD4C,MAAM,CAACT,IAAP,GAAcnC,CAAC,CAACG,EAAhB;IACD;IACD,IAAI,CAACsC,YAAY,CAACG,MAAD,CAAjB,EAA2B;MACzB,OAAO,IAAP;IACD;IACD,OAAOA,MAAP;EACD,CAtBM;EAAAnD,EAAA,CAAAa,QAAA;IAAAmC,YAAA,E;;;;;;GAAA;AAoCP,OAAO,IAAMM,QAAQ;EAAA,IAAAtD,EAAA,YAAAA,GAAIC,IAAD,EAAaE,CAAb,EAA0C;IAAA,IAAlBoD,SAAkB,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAN,CAAM;IAEhE,IAAMtB,CAAC,GAAG2C,WAAW,CAACjD,IAAD,EAAOE,CAAP,CAArB;IACA,IAAII,CAAC,KAAK,IAAV,EAAgB;MACd,OAAO,IAAP;IACD;IACD,OAAOT,gBAAgB,CACrBK,CADqB,EAErBI,CAAC,CAACmC,IAFmB,EAGrBnC,CAAC,CAAC0C,KAAF,CAAQzC,EAHa,EAIrBD,CAAC,CAAC0C,KAAF,CAAQxC,EAJa,EAKrBF,CAAC,CAAC0C,KAAF,CAAQvC,EALa,EAMrB6C,SANqB,CAAvB;EAQD,CAdM;EAAAvD,EAAA,CAAAa,QAAA;IAAAqC,WAAA,E;;;;;;;GAAA;AAgBP,IAAMM,YAAY;EAAA,IAAAxD,EAAA,YAAAA,GAChByD,OADmB,EAEnBC,QAFmB,EAGnBC,IAHmB,EAInBC,OAJmB,EAKnBC,SALmB,EAMhB;IAEH,IAAM5B,CAAC,GAAGyB,QAAQ,IAAID,OAAtB;IACA,IAAMK,CAAC,GAAGH,IAAI,IAAIF,OAAlB;IAEA,IAAMM,OAAO,GAAGD,CAAC,CAAC3D,CAAF,GAAM8B,CAAC,CAAC9B,CAAxB;IACA,IAAM6D,OAAO,GAAGF,CAAC,CAAC1D,CAAF,GAAM6B,CAAC,CAAC7B,CAAxB;IAEA,IAAM6D,CAAC,GAAGpE,eAAe,CAAC;MAAEM,CAAC,EAAE4D,OAAL;MAAc3D,CAAC,EAAE4D;IAAjB,CAAD,CAAzB;IAEA,IAAME,KAAK,GAAGD,CAAC,CAACE,KAAF,IAAWP,OAAO,GAAGQ,IAAI,CAACC,EAAR,GAAa,CAA/B,CAAd;IACA,IAAMvC,MAAM,GAAGmC,CAAC,CAACK,MAAF,GAAWT,SAA1B;IAEA,IAAM1D,CAAC,GAAGsD,OAAO,CAACtD,CAAR,GAAYiE,IAAI,CAACG,GAAL,CAASL,KAAT,IAAkBpC,MAAxC;IACA,IAAM1B,CAAC,GAAGqD,OAAO,CAACrD,CAAR,GAAYgE,IAAI,CAACI,GAAL,CAASN,KAAT,IAAkBpC,MAAxC;IACA,OAAO;MAAE3B,CAAC,EAADA,CAAF;MAAKC,CAAC,EAADA;IAAL,CAAP;EACD,CAtBD;EAAAJ,EAAA,CAAAa,QAAA;IAAAhB,eAAA,E;;;;;;GAAA;AAwBA,IAAM4E,eAAe,GAAG,SAAlBA,eAAkBA,CAACC,CAAD,EAAqB;EAC3C,MAAM,IAAIC,KAAJ,gCAAuCD,CAAvC,CAAN;AACD,CAFD;AASA,OAAO,IAAME,UAAU;EAAA,IAAA5E,EAAA,YAAAA,GACrB6E,MADwB,EAExBhB,SAFwB,EAGxBiB,QAHwB,EAIrB;IAEH,IAAM7E,IAAI,GAAGmB,UAAU,CAACyD,MAAM,CAAC,CAAD,CAAP,CAAvB;IAEA,KAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,MAAM,CAAC/C,MAA3B,EAAmCsB,CAAC,EAApC,EAAwC;MACtC,IAAIA,CAAC,KAAK,CAAV,EAAa;QACX;MACD;MACD,IAAM2B,KAAK,GAAGF,MAAM,CAACzB,CAAD,CAApB;MACA,IAAMO,IAAI,GAAGkB,MAAM,CAACzB,CAAC,GAAG,CAAL,CAAnB;MACA,IAAM4B,IAAI,GAAGH,MAAM,CAACzB,CAAC,GAAG,CAAL,CAAnB;MACA,IAAM6B,GAAG,GAAGzB,YAAY,CAACwB,IAAD,EAAOH,MAAM,CAACzB,CAAC,GAAG,CAAL,CAAb,EAAsB2B,KAAtB,EAA6B,KAA7B,EAAoClB,SAApC,CAAxB;MACA,IAAMqB,GAAG,GAAG1B,YAAY,CAACuB,KAAD,EAAQC,IAAR,EAAcrB,IAAd,EAAoB,IAApB,EAA0BE,SAA1B,CAAxB;MACA,QAAQiB,QAAR;QACE,KAAK,QAAL;UACE,IAAM/B,EAAE,GAAG;YACT5C,CAAC,EAAE,CAAC8E,GAAG,CAAC9E,CAAJ,GAAQ+E,GAAG,CAAC/E,CAAb,IAAkB,CADZ;YAETC,CAAC,EAAE,CAAC6E,GAAG,CAAC7E,CAAJ,GAAQ8E,GAAG,CAAC9E,CAAb,IAAkB;UAFZ,CAAX;UAIA0C,iBAAiB,CAAC7C,IAAD,EAAO8C,EAAP,EAAWgC,KAAX,CAAjB;UACA;QACF,KAAK,QAAL;UACE,IAAMI,EAAE,GAAGN,MAAM,CAACzB,CAAC,GAAG,CAAL,CAAN,IAAiB4B,IAA5B;UACA,IAAM3C,EAAE,GAAGwC,MAAM,CAACzB,CAAC,GAAG,CAAL,CAAjB;UACA,IAAMgC,IAAI,GAAG,CAAC,IAAID,EAAE,CAAChF,CAAP,GAAWkC,EAAE,CAAClC,CAAf,IAAoB,CAAjC;UACA,IAAMkF,IAAI,GAAG,CAAC,IAAIF,EAAE,CAAC/E,CAAP,GAAWiC,EAAE,CAACjC,CAAf,IAAoB,CAAjC;UACA,IAAMkF,IAAI,GAAG,CAACH,EAAE,CAAChF,CAAH,GAAO,IAAIkC,EAAE,CAAClC,CAAf,IAAoB,CAAjC;UACA,IAAMoF,IAAI,GAAG,CAACJ,EAAE,CAAC/E,CAAH,GAAO,IAAIiC,EAAE,CAACjC,CAAf,IAAoB,CAAjC;UACA,IAAMoF,IAAI,GAAG,CAACL,EAAE,CAAChF,CAAH,GAAO,IAAIkC,EAAE,CAAClC,CAAd,GAAkB4E,KAAK,CAAC5E,CAAzB,IAA8B,CAA3C;UACA,IAAMsF,IAAI,GAAG,CAACN,EAAE,CAAC/E,CAAH,GAAO,IAAIiC,EAAE,CAACjC,CAAd,GAAkB2E,KAAK,CAAC3E,CAAzB,IAA8B,CAA3C;UACAH,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;YACfpC,EAAE,EAAE;cAAEL,CAAC,EAAEiF,IAAL;cAAWhF,CAAC,EAAEiF;YAAd,CADW;YAEf5E,EAAE,EAAE;cAAEN,CAAC,EAAEmF,IAAL;cAAWlF,CAAC,EAAEmF;YAAd,CAFW;YAGf7E,EAAE,EAAE;cAAEP,CAAC,EAAEqF,IAAL;cAAWpF,CAAC,EAAEqF;YAAd;UAHW,CAAjB;UAKA,IAAIrC,CAAC,KAAKyB,MAAM,CAAC/C,MAAP,GAAgB,CAA1B,EAA6B;YAC3B7B,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;cACflC,EAAE,EAAEmE,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CADK;cAEftB,EAAE,EAAEqE,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAFK;cAGfrB,EAAE,EAAEoE,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB;YAHK,CAAjB;UAKD;UACD;QACF,KAAK,SAAL;UACE7B,IAAI,CAACI,MAAL,CAAYuC,IAAZ,CAAiB;YACflC,EAAE,EAAEqE,KADW;YAEfvE,EAAE,EAAEyE,GAFW;YAGfxE,EAAE,EAAEyE;UAHW,CAAjB;UAKA;QACF;UACET,eAAe,CAACK,QAAD,CAAf;MAtCJ;IAwCD;IACD,OAAO7E,IAAP;EACD,CA3DM;EAAAD,EAAA,CAAAa,QAAA;IAAAO,UAAA,E;;;;;;;;;GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { Circle, Defs, Mask } from 'react-native-svg';\nimport COLORS from \"../../utils/colors\";\nvar DashedCircle = function DashedCircle(_ref) {\n  var _ref$dashedStrokeConf = _ref.dashedStrokeConfig,\n    dashedStrokeConfig = _ref$dashedStrokeConf === void 0 ? {\n      count: 0,\n      width: 0\n    } : _ref$dashedStrokeConf,\n    circleCircumference = _ref.circleCircumference,\n    inActiveStrokeWidth = _ref.inActiveStrokeWidth,\n    activeStrokeWidth = _ref.activeStrokeWidth,\n    inactiveCircleRadius = _ref.inactiveCircleRadius,\n    activeCircleRadius = _ref.activeCircleRadius;\n  var strokeDashArray = useMemo(function () {\n    var totalDashSpace = dashedStrokeConfig.width * dashedStrokeConfig.count;\n    var dashGap = (circleCircumference - totalDashSpace) / dashedStrokeConfig.count;\n    return dashedStrokeConfig.width + \" \" + dashGap;\n  }, [circleCircumference, dashedStrokeConfig]);\n  var strokeWidth = useMemo(function () {\n    return Math.max(inActiveStrokeWidth, activeStrokeWidth);\n  }, [inActiveStrokeWidth, activeStrokeWidth]);\n  var radius = useMemo(function () {\n    return Math.max(inactiveCircleRadius, activeCircleRadius);\n  }, [inactiveCircleRadius, activeCircleRadius]);\n  if ((dashedStrokeConfig === null || dashedStrokeConfig === void 0 ? void 0 : dashedStrokeConfig.count) > 0 && (dashedStrokeConfig === null || dashedStrokeConfig === void 0 ? void 0 : dashedStrokeConfig.width) > 0) {\n    return React.createElement(Defs, null, React.createElement(Mask, {\n      id: \"dashed-circle\"\n    }, React.createElement(Circle, {\n      cx: \"50%\",\n      cy: \"50%\",\n      stroke: COLORS.WHITE,\n      fill: COLORS.TRANSPARENT,\n      strokeWidth: strokeWidth,\n      r: radius,\n      strokeOpacity: 1,\n      strokeDasharray: strokeDashArray\n    })));\n  }\n  return null;\n};\nexport default React.memo(DashedCircle);","map":{"version":3,"names":["React","useMemo","Circle","Defs","Mask","COLORS","DashedCircle","_ref","_ref$dashedStrokeConf","dashedStrokeConfig","count","width","circleCircumference","inActiveStrokeWidth","activeStrokeWidth","inactiveCircleRadius","activeCircleRadius","strokeDashArray","totalDashSpace","dashGap","strokeWidth","Math","max","radius","createElement","id","cx","cy","stroke","WHITE","fill","TRANSPARENT","r","strokeOpacity","strokeDasharray","memo"],"sources":["C:\\Users\\jenli\\csula-cs3337swe-202301Group5-repo\\node_modules\\react-native-circular-progress-indicator\\lib\\module\\components\\dashedCircle\\index.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Circle, Defs, Mask } from 'react-native-svg';\n\nimport COLORS from '../../utils/colors';\nimport type { DashedCircleProps } from '../../types';\n\nconst DashedCircle: React.FC<DashedCircleProps> = ({\n  dashedStrokeConfig = { count: 0, width: 0 },\n  circleCircumference,\n  inActiveStrokeWidth,\n  activeStrokeWidth,\n  inactiveCircleRadius,\n  activeCircleRadius,\n}: DashedCircleProps) => {\n  const strokeDashArray = useMemo(() => {\n    const totalDashSpace = dashedStrokeConfig.width * dashedStrokeConfig.count;\n    const dashGap =\n      (circleCircumference - totalDashSpace) / dashedStrokeConfig.count;\n    return `${dashedStrokeConfig.width} ${dashGap}`;\n  }, [circleCircumference, dashedStrokeConfig]);\n\n  const strokeWidth = useMemo(\n    () => Math.max(inActiveStrokeWidth, activeStrokeWidth),\n    [inActiveStrokeWidth, activeStrokeWidth]\n  );\n  const radius = useMemo(\n    () => Math.max(inactiveCircleRadius, activeCircleRadius),\n    [inactiveCircleRadius, activeCircleRadius]\n  );\n\n  if (dashedStrokeConfig?.count > 0 && dashedStrokeConfig?.width > 0) {\n    return (\n      <Defs>\n        <Mask id=\"dashed-circle\">\n          <Circle\n            cx=\"50%\"\n            cy=\"50%\"\n            stroke={COLORS.WHITE}\n            fill={COLORS.TRANSPARENT}\n            strokeWidth={strokeWidth}\n            r={radius}\n            strokeOpacity={1}\n            strokeDasharray={strokeDashArray}\n          />\n        </Mask>\n      </Defs>\n    );\n  }\n  return null;\n};\n\nexport default React.memo(DashedCircle);\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,QAAmC,kBAAnC;AAEA,OAAOC,MAAP;AAGA,IAAMC,YAAyC,GAAG,SAA5CA,YAAyCA,CAAGC,IAAA,EAOzB;EAAA,IAAAC,qBAAA,GAAAD,IAAA,CANvBE,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAG;MAAEE,KAAK,EAAE,CAAT;MAAYC,KAAK,EAAE;IAAnB,CAD4B,GAAAH,qBAAA;IAEjDI,mBAFiD,GAO1BL,IAAA,CALvBK,mBAFiD;IAGjDC,mBAHiD,GAO1BN,IAAA,CAJvBM,mBAHiD;IAIjDC,iBAJiD,GAO1BP,IAAA,CAHvBO,iBAJiD;IAKjDC,oBALiD,GAO1BR,IAAA,CAFvBQ,oBALiD;IAMjDC,kBAAA,GACuBT,IAAA,CADvBS,kBAAA;EAEA,IAAMC,eAAe,GAAGhB,OAAO,CAAC,YAAM;IACpC,IAAMiB,cAAc,GAAGT,kBAAkB,CAACE,KAAnB,GAA2BF,kBAAkB,CAACC,KAArE;IACA,IAAMS,OAAO,GACX,CAACP,mBAAmB,GAAGM,cAAvB,IAAyCT,kBAAkB,CAACC,KAD9D;IAEA,OAAUD,kBAAkB,CAACE,KAAM,SAAGQ,OAAQ;EAC/C,CAL8B,EAK5B,CAACP,mBAAD,EAAsBH,kBAAtB,CAL4B,CAA/B;EAOA,IAAMW,WAAW,GAAGnB,OAAO,CACzB;IAAA,OAAMoB,IAAI,CAACC,GAAL,CAAST,mBAAT,EAA8BC,iBAA9B,CADmB;EAAA,GAEzB,CAACD,mBAAD,EAAsBC,iBAAtB,CAFyB,CAA3B;EAIA,IAAMS,MAAM,GAAGtB,OAAO,CACpB;IAAA,OAAMoB,IAAI,CAACC,GAAL,CAASP,oBAAT,EAA+BC,kBAA/B,CADc;EAAA,GAEpB,CAACD,oBAAD,EAAuBC,kBAAvB,CAFoB,CAAtB;EAKA,IAAI,CAAAP,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEC,KAApB,IAA4B,CAA5B,IAAiC,CAAAD,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEE,KAApB,IAA4B,CAAjE,EAAoE;IAClE,OACEX,KAAA,CAAAwB,aAAA,CAACrB,IAAD,QACEH,KAAA,CAAAwB,aAAA,CAACpB,IAAD;MAAMqB,EAAE,EAAC;IAAT,GACEzB,KAAA,CAAAwB,aAAA,CAACtB,MAAD;MACEwB,EAAE,EAAC,KADL;MAEEC,EAAE,EAAC,KAFL;MAGEC,MAAM,EAAEvB,MAAM,CAACwB,KAHjB;MAIEC,IAAI,EAAEzB,MAAM,CAAC0B,WAJf;MAKEX,WAAW,EAAEA,WALf;MAMEY,CAAC,EAAET,MANL;MAOEU,aAAa,EAAE,CAPjB;MAQEC,eAAe,EAAEjB;IARnB,EADF,CADF,CADF;EAgBD;EACD,OAAO,IAAP;AACD,CA3CD;AA6CA,eAAejB,KAAK,CAACmC,IAAN,CAAW7B,YAAX,CAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer } from '@react-navigation/native';\nimport React, { createContext, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport Dashboard from \"./Tabs/Dashboard\";\nimport LogPage from \"./Tabs/LogPage\";\nimport Goal from \"./Tabs/Goal\";\nimport Profile from \"./Tabs/Profile\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DataContext = createContext(null);\nvar dashboard = 'Dashboard';\nvar logPage = 'Log';\nvar goal = 'Goal';\nvar profile = 'Profile';\nvar stacknav = 'Log';\nvar Tab = createBottomTabNavigator();\nexport default function TabNavigator(_ref) {\n  var _route$params;\n  var route = _ref.route;\n  var _useState = useState((_route$params = route.params) == null ? void 0 : _route$params.doc),\n    _useState2 = _slicedToArray(_useState, 2),\n    docData = _useState2[0],\n    setDocData = _useState2[1];\n  console.log(\"You've made it to tab navigaor component, did you see the view?\");\n  console.log(docData);\n  console.log(\"in tab, about to display nav\");\n  return _jsx(DataContext.Provider, {\n    value: {\n      docData: docData,\n      setDocData: setDocData\n    },\n    children: _jsx(NavigationContainer, {\n      independent: true,\n      children: _jsxs(Tab.Navigator, {\n        initialRouteName: dashboard,\n        independent: true,\n        screenOptions: function screenOptions(_ref2) {\n          var route = _ref2.route;\n          return {\n            tabBarIcon: function tabBarIcon(_ref3) {\n              var focused = _ref3.focused,\n                color = _ref3.color,\n                size = _ref3.size;\n              var iconName;\n              var routeName = route.name;\n              if (routeName === dashboard) {\n                iconName = focused ? 'grid' : 'grid-outline';\n              } else if (routeName === stacknav) {\n                iconName = focused ? 'book' : 'book-outline';\n              } else if (routeName === goal) {\n                iconName = focused ? 'calendar' : 'calendar-outline';\n              } else if (routeName === profile) {\n                iconName = focused ? 'person' : 'person-outline';\n              }\n              return _jsx(Ionicons, {\n                name: iconName,\n                size: size,\n                color: color\n              });\n            },\n            tabBarActiveTintColor: 'black',\n            tabBarInactiveTintColor: 'grey',\n            tabBarLabelStyle: {\n              paddingBottom: 5,\n              fontSize: 10\n            },\n            style: {\n              padding: 10,\n              height: 70\n            }\n          };\n        },\n        children: [_jsx(Tab.Screen, {\n          name: dashboard,\n          component: Dashboard\n        }), _jsx(Tab.Screen, {\n          name: logPage,\n          component: LogPage\n        }), _jsx(Tab.Screen, {\n          name: goal,\n          component: Goal\n        }), _jsx(Tab.Screen, {\n          name: profile,\n          component: Profile\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["createBottomTabNavigator","NavigationContainer","React","createContext","useState","StyleSheet","Ionicons","Dashboard","LogPage","Goal","Profile","jsx","_jsx","jsxs","_jsxs","DataContext","dashboard","logPage","goal","profile","stacknav","Tab","TabNavigator","_ref","_route$params","route","_useState","params","doc","_useState2","_slicedToArray","docData","setDocData","console","log","Provider","value","children","independent","Navigator","initialRouteName","screenOptions","_ref2","tabBarIcon","_ref3","focused","color","size","iconName","routeName","name","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarLabelStyle","paddingBottom","fontSize","style","padding","height","Screen","component"],"sources":["C:/Users/jenli/csula-cs3337swe-202301Group5-repo/Components/TabNavigator.js"],"sourcesContent":["import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport React, { createContext, useState } from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\nimport Dashboard from './Tabs/Dashboard';\r\nimport LogPage from './Tabs/LogPage';\r\nimport Goal from './Tabs/Goal';\r\nimport Profile from './Tabs/Profile';\r\n\r\nexport const DataContext = createContext(null);\r\n\r\n// Tab names\r\nconst dashboard = 'Dashboard';\r\nconst logPage = 'Log';\r\nconst goal = 'Goal';\r\nconst profile = 'Profile';\r\nconst stacknav = 'Log'\r\n\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nexport default function TabNavigator({ route }) {\r\n  const [docData, setDocData] = useState(route.params?.doc);\r\n  console.log(\"You've made it to tab navigaor component, did you see the view?\");\r\n  console.log(docData);\r\n  console.log(\"in tab, about to display nav\");\r\n\r\n  return (\r\n    <DataContext.Provider value={{ docData, setDocData }}>\r\n      <NavigationContainer independent={true}>\r\n        <Tab.Navigator initialRouteName = {dashboard} independent={true} screenOptions={({route}) => ({\r\n          tabBarIcon: ({focused, color, size}) => {\r\n            let iconName;\r\n            let routeName = route.name;\r\n\r\n            if (routeName === dashboard)\r\n            {\r\n              iconName = focused ? 'grid': 'grid-outline'\r\n            }\r\n\r\n            else if(routeName === stacknav)\r\n            {\r\n              iconName = focused ? 'book' : 'book-outline'\r\n            }\r\n\r\n            else if(routeName === goal)\r\n            {\r\n              iconName = focused ? 'calendar' : 'calendar-outline'\r\n            }\r\n\r\n            else if(routeName === profile)\r\n            {\r\n              iconName = focused ? 'person' : 'person-outline'\r\n            }\r\n\r\n            return <Ionicons name={iconName} size={size} color={color}/>\r\n\r\n          },\r\n          tabBarActiveTintColor: 'black',\r\n          tabBarInactiveTintColor: 'grey',\r\n          tabBarLabelStyle: {paddingBottom: 5, fontSize: 10},\r\n          style: {padding:10, height: 70}\r\n\r\n        })}>\r\n\r\n          <Tab.Screen name={dashboard} component={Dashboard}/>\r\n          <Tab.Screen name={logPage} component={LogPage}/>\r\n          <Tab.Screen name={goal} component={Goal}/>\r\n          <Tab.Screen name={profile} component={Profile}/>\r\n\r\n        </Tab.Navigator>\r\n      </NavigationContainer>\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n\r\n\r\n\r\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n// import { NavigationContainer } from '@react-navigation/native';\r\n// import React, { createContext, useState } from 'react';\r\n// import { StyleSheet } from 'react-native';\r\n// import Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\n// import Dashboard from './Tabs/Dashboard';\r\n// import LogPage from './Tabs/LogPage';\r\n// import Goal from './Tabs/Goal';\r\n// import Profile from './Tabs/Profile';\r\n\r\n// export const DataContext = createContext(null);\r\n\r\n// // Tab names\r\n// const dashboard = 'Dashboard';\r\n// const logPage = 'Log';\r\n// const goal = 'Goal';\r\n// const profile = 'Profile';\r\n// const stacknav = 'Log'\r\n\r\n\r\n\r\n\r\n// const Tab = createBottomTabNavigator();\r\n\r\n// export default function TabNavigator({ route }) {\r\n//   const [docData, setDocData] = useState(route.params?.doc);\r\n//   console.log(\"made it to render\");\r\n//   return (\r\n//     <DataContext.Provider value={{ docData, setDocData }}>\r\n//       <NavigationContainer independent={true}>\r\n//         <Tab.Navigator initialRouteName = \"\" independent={true} screenOptions={({route}) => ({\r\n//           tabBarIcon: ({focused, color, size}) => {\r\n//             let iconName;\r\n//             let routeName = route.name;\r\n\r\n//             if (routeName === dashboard)\r\n//             {\r\n//               iconName = focused ? 'grid': 'grid-outline'\r\n//             }\r\n\r\n//             else if(routeName === stacknav)\r\n//             {\r\n//               iconName = focused ? 'book' : 'book-outline'\r\n//             }\r\n\r\n//             else if(routeName === goal)\r\n//             {\r\n//               iconName = focused ? 'calendar' : 'calendar-outline'\r\n//             }\r\n\r\n//             else if(routeName === profile)\r\n//             {\r\n//               iconName = focused ? 'person' : 'person-outline'\r\n//             }\r\n\r\n//             return <Ionicons name={iconName} size={size} color={color}/>\r\n\r\n//           },\r\n//           tabBarActiveTintColor: 'black',\r\n//           tabBarInactiveTintColor: 'grey',\r\n//           tabBarLabelStyle: {paddingBottom: 5, fontSize: 10},\r\n//           style: {padding:10, height: 70}\r\n\r\n//         })}>\r\n\r\n//           <Tab.Screen name={dashboard} component={Dashboard}/>\r\n//           <Tab.Screen name={logPage} component={LogPage}/>\r\n//           <Tab.Screen name={goal} component={Goal}/>\r\n//           <Tab.Screen name={profile} component={Profile}/>\r\n\r\n//         </Tab.Navigator>\r\n//       </NavigationContainer>\r\n//     </DataContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n// // import { NavigationContainer } from '@react-navigation/native';\r\n// // import React from 'react';\r\n// // import { StyleSheet } from 'react-native';\r\n// // import Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\n// // import Dashboard from './Tabs/Dashboard';\r\n// // import LogPage from './Tabs/LogPage';\r\n// // import Goal from './Tabs/Goal';\r\n// // import Profile from './Tabs/Profile';\r\n\r\n\r\n// // // Tab names\r\n// // const dashboard = 'Dashboard';\r\n// // const logPage = 'Log';\r\n// // const goal = 'Goal';\r\n// // const profile = 'Profile';\r\n// // const stacknav = 'Log'\r\n\r\n\r\n// // const Tab = createBottomTabNavigator();\r\n\r\n// // export default function TabNavigator() {\r\n// //   return (\r\n// //     <NavigationContainer independent={true}>\r\n// //       <Tab.Navigator initialRouteName = \"\" independent={true} screenOptions={({route}) => ({\r\n// //         tabBarIcon: ({focused, color, size}) => {\r\n// //           let iconName;\r\n// //           let routeName = route.name;\r\n\r\n// //           if (routeName === dashboard)\r\n// //           {\r\n// //             iconName = focused ? 'grid': 'grid-outline'\r\n// //           }\r\n\r\n// //           else if(routeName === stacknav)\r\n// //           {\r\n// //             iconName = focused ? 'book' : 'book-outline'\r\n// //           }\r\n\r\n// //           else if(routeName === goal)\r\n// //           {\r\n// //             iconName = focused ? 'calendar' : 'calendar-outline'\r\n// //           }\r\n\r\n// //           else if(routeName === profile)\r\n// //           {\r\n// //             iconName = focused ? 'person' : 'person-outline'\r\n// //           }\r\n\r\n// //           return <Ionicons name={iconName} size={size} color={color}/>\r\n\r\n// //         },\r\n// //         tabBarActiveTintColor: 'black',\r\n// //         tabBarInactiveTintColor: 'grey',\r\n// //         tabBarLabelStyle: {paddingBottom: 5, fontSize: 10},\r\n// //         style: {padding:10, height: 70}\r\n        \r\n// //       })}>\r\n\r\n// //         <Tab.Screen name={dashboard} component={Dashboard}/>\r\n// //         <Tab.Screen name={logPage} component={LogPage}/>\r\n// //         <Tab.Screen name={goal} component={Goal}/>\r\n// //         <Tab.Screen name={profile} component={Profile}/>\r\n       \r\n// //       </Tab.Navigator>\r\n// //     </NavigationContainer>\r\n// //   );\r\n// // }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { LineChart } from 'react-native-chart-kit';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function MyLineChart() {\n  var _useState = useState('daily'),\n    _useState2 = _slicedToArray(_useState, 2),\n    timeFrame = _useState2[0],\n    setTimeFrame = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    calorieGoal = _useState4[0],\n    setCalorieGoal = _useState4[1];\n  var _useState5 = useState({\n      labels: [],\n      datasets: [{\n        data: [],\n        strokeWidth: 2\n      }]\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    chartData = _useState6[0],\n    setChartData = _useState6[1];\n  var renderChartData = function renderChartData() {\n    switch (timeFrame) {\n      case 'weekly':\n        return {\n          labels: ['Wk 1', 'Wk 2', 'Wk 3', 'Wk 4'],\n          datasets: [{\n            data: [calorieGoal / 4, calorieGoal / 4 * 2, calorieGoal / 4 * 3, calorieGoal],\n            strokeWidth: 2\n          }]\n        };\n      case 'monthly':\n        return {\n          labels: ['1', '8', '15', '22', '30'],\n          datasets: [{\n            data: [calorieGoal / 4, calorieGoal / 4 * 2, calorieGoal / 4 * 3, calorieGoal / 4 * 4, calorieGoal],\n            strokeWidth: 2\n          }]\n        };\n      default:\n        return {\n          labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n          datasets: [{\n            data: [calorieGoal / 7, calorieGoal / 7 * 2, calorieGoal / 7 * 3, calorieGoal / 7 * 4, calorieGoal / 7 * 5, calorieGoal / 7 * 6, calorieGoal],\n            strokeWidth: 2\n          }]\n        };\n    }\n  };\n  var handleCalorieGoalInput = function handleCalorieGoalInput(goal) {\n    var parsedGoal = parseInt(goal);\n    if (!isNaN(parsedGoal)) {\n      setCalorieGoal(parsedGoal);\n    }\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Text, {\n      style: [styles.header, {\n        alignSelf: 'center'\n      }],\n      children: \"Goal Chart\"\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: [_jsx(TouchableOpacity, {\n        style: [styles.button, timeFrame === 'daily' && styles.activeButton],\n        onPress: function onPress() {\n          return setTimeFrame('daily');\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"DAILY\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: [styles.button, timeFrame === 'weekly' && styles.activeButton],\n        onPress: function onPress() {\n          return setTimeFrame('weekly');\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"WEEKLY\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: [styles.button, timeFrame === 'monthly' && styles.activeButton],\n        onPress: function onPress() {\n          return setTimeFrame('monthly');\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"MONTHLY\"\n        })\n      })]\n    }), _jsx(LineChart, {\n      data: renderChartData(),\n      width: Dimensions.get('window').width - 16,\n      height: 220,\n      chartConfig: {\n        backgroundColor: '#F2F3F5',\n        backgroundGradientFrom: '#F2F3F5',\n        backgroundGradientTo: '#F2F3F5',\n        decimalPlaces: 2,\n        color: function color() {\n          var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          return \"rgba(0, 0, 0, \" + opacity + \")\";\n        },\n        style: {\n          borderRadius: 16,\n          padding: 16\n        }\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Enter your calorie goal\",\n      keyboardType: \"numeric\",\n      style: styles.input,\n      onChangeText: handleCalorieGoalInput,\n      value: calorieGoal.toString()\n    }), _jsx(TouchableOpacity, {\n      style: styles.saveButton,\n      onPress: function onPress() {},\n      children: _jsx(Text, {\n        style: [styles.saveButtonText, styles.buttonText],\n        children: \"Save\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  input: {\n    height: 40,\n    borderColor: \"gray\",\n    borderWidth: 1,\n    margin: 10,\n    padding: 10\n  },\n  header: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginVertical: 16\n  },\n  button: {\n    backgroundColor: '#efefef',\n    borderRadius: 8,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    marginVertical: 8,\n    marginHorizontal: 2\n  },\n  saveButton: {\n    backgroundColor: '#c2c0c0',\n    padding: 10,\n    borderRadius: 10,\n    alignSelf: 'center',\n    marginTop: 16\n  },\n  activeButton: {\n    backgroundColor: '#c2c0c0'\n  },\n  buttonText: {\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","Text","Dimensions","StyleSheet","TouchableOpacity","View","TextInput","LineChart","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MyLineChart","_useState","_useState2","_slicedToArray","timeFrame","setTimeFrame","_useState3","_useState4","calorieGoal","setCalorieGoal","_useState5","labels","datasets","data","strokeWidth","_useState6","chartData","setChartData","renderChartData","handleCalorieGoalInput","goal","parsedGoal","parseInt","isNaN","children","style","styles","header","alignSelf","flexDirection","button","activeButton","onPress","buttonText","width","get","height","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","arguments","length","undefined","borderRadius","padding","placeholder","keyboardType","input","onChangeText","value","toString","saveButton","saveButtonText","create","borderColor","borderWidth","margin","fontSize","fontWeight","marginVertical","paddingVertical","paddingHorizontal","marginHorizontal","marginTop"],"sources":["C:/Users/jenli/csula-cs3337swe-202301Group5-repo/Components/Tabs/Goal_component/LineChart.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, Dimensions, StyleSheet, TouchableOpacity, View, TextInput } from 'react-native';\r\nimport { LineChart } from 'react-native-chart-kit';\r\n\r\nexport default function MyLineChart() {\r\n  const [timeFrame, setTimeFrame] = useState('daily');\r\n  const [calorieGoal, setCalorieGoal] = useState('');\r\n  const [chartData, setChartData] = useState({ labels: [], datasets: [{ data: [], strokeWidth: 2 }] });\r\n\r\n  const renderChartData = () => {\r\n    switch (timeFrame) {\r\n      case 'weekly':\r\n        return {\r\n          labels: ['Wk 1', 'Wk 2', 'Wk 3', 'Wk 4'],\r\n          datasets: [\r\n            {\r\n              data: [calorieGoal / 4, calorieGoal / 4 * 2, calorieGoal / 4 * 3, calorieGoal],\r\n              strokeWidth: 2,\r\n            },\r\n          ],\r\n        };\r\n      case 'monthly':\r\n        return {\r\n          labels: ['1', '8', '15', '22', '30'],\r\n          datasets: [\r\n            {\r\n              data: [calorieGoal / 4, calorieGoal / 4 * 2, calorieGoal / 4 * 3, calorieGoal / 4 * 4, calorieGoal],\r\n              strokeWidth: 2,\r\n            },\r\n          ],\r\n        };\r\n      default:\r\n        // daily\r\n        return {\r\n          labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n          datasets: [\r\n            {\r\n              data: [calorieGoal / 7, calorieGoal / 7 * 2, calorieGoal / 7 * 3, calorieGoal / 7 * 4, calorieGoal / 7 * 5, calorieGoal / 7 * 6, calorieGoal],\r\n              strokeWidth: 2,\r\n            },\r\n          ],\r\n        };\r\n    }\r\n  };\r\n\r\n  const handleCalorieGoalInput = (goal) => {\r\n    const parsedGoal = parseInt(goal);\r\n    if (!isNaN(parsedGoal)) {\r\n      setCalorieGoal(parsedGoal);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text style={[styles.header, {alignSelf: 'center'}]}>Goal Chart</Text>\r\n      <View style={{flexDirection: 'row'}}>\r\n        <TouchableOpacity\r\n          style={[styles.button, timeFrame === 'daily' && styles.activeButton]}\r\n          onPress={() => setTimeFrame('daily')}>\r\n          <Text style={styles.buttonText}>DAILY</Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity\r\n          style={[styles.button, timeFrame === 'weekly' && styles.activeButton]}\r\n          onPress={() => setTimeFrame('weekly')}>\r\n          <Text style={styles.buttonText}>WEEKLY</Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity\r\n          style={[styles.button, timeFrame === 'monthly' && styles.activeButton]}\r\n          onPress={() => setTimeFrame('monthly')}>\r\n          <Text style={styles.buttonText}>MONTHLY</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <LineChart\r\n        data={renderChartData()}\r\n        width={Dimensions.get('window').width - 16}\r\n        height={220}\r\n        chartConfig={{\r\n          backgroundColor: '#F2F3F5',\r\n          backgroundGradientFrom: '#F2F3F5',\r\n          backgroundGradientTo: '#F2F3F5',\r\n          decimalPlaces: 2,\r\n          color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\r\n          style: {\r\n            borderRadius: 16,\r\n            padding: 16,\r\n          }\r\n        }}/>\r\n      <TextInput\r\n        placeholder=\"Enter your calorie goal\"\r\n        keyboardType=\"numeric\"\r\n        style={styles.input}\r\n        onChangeText={handleCalorieGoalInput}\r\n        value={calorieGoal.toString()}\r\n      />\r\n       <TouchableOpacity\r\n        style={styles.saveButton}\r\n        onPress={() => {\r\n          // code to save the calorie goal goes here\r\n        }}\r\n      >\r\n        <Text style={[styles.saveButtonText, styles.buttonText]}>Save</Text>\r\n      </TouchableOpacity>\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    margin: 10,\r\n    padding: 10,\r\n  },\r\n  header: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginVertical: 16,\r\n  },\r\n  button: {\r\n    backgroundColor: '#efefef',\r\n    borderRadius: 8,\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 12,\r\n    marginVertical: 8,\r\n    marginHorizontal: 2,\r\n  },\r\n  saveButton: {\r\n    backgroundColor: '#c2c0c0',\r\n    padding: 10,\r\n    borderRadius: 10,\r\n    alignSelf: 'center',\r\n    marginTop: 16,\r\n  },\r\n  activeButton: {\r\n    backgroundColor: '#c2c0c0',\r\n  },\r\n  buttonText: {\r\n    fontWeight: 'bold',\r\n  },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
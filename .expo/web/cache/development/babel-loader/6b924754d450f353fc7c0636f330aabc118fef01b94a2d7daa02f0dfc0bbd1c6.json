{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Calendar } from 'react-native-calendars';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CalendarComponent = function CalendarComponent() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedDate = _useState2[0],\n    setSelectedDate = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    calorieGoal = _useState4[0],\n    setCalorieGoal = _useState4[1];\n  var handleCalorieInputChange = function handleCalorieInputChange(text) {\n    var parsedValue = parseFloat(text.replace(',', '.'));\n    if (!isNaN(parsedValue)) {\n      setCalorieGoal(parsedValue);\n    } else {\n      setCalorieGoal(null);\n    }\n  };\n  var handleDayPress = function handleDayPress(day) {\n    if (selectedDate === day.dateString) {\n      setSelectedDate(null);\n    } else {\n      setSelectedDate(day.dateString);\n    }\n  };\n  var calculateCalories = function calculateCalories() {\n    if (!calorieGoal) {\n      return 'Please enter a calorie goal';\n    }\n    if (!selectedDate) {\n      return 'Please select a date';\n    }\n    var currentDate = new Date();\n    var selectedDateFormat = new Date(selectedDate);\n    if (selectedDateFormat > currentDate) {\n      var daysLeft = Math.floor((selectedDateFormat - currentDate) / (1000 * 60 * 60 * 24));\n      if (daysLeft == 0) {\n        return \"You have 3 days left to reach your goal. Consume \" + Math.ceil(calorieGoal / 3) + \" calories per day to reach your goal by \" + selectedDate;\n      } else {\n        return \"You have \" + (daysLeft + 3) + \" day(s) left to reach your goal. Consume \" + Math.ceil(calorieGoal / (daysLeft + 3)) + \" calories per day to reach your goal by \" + selectedDate;\n      }\n    } else {\n      var oneDayInMilliseconds = 1000 * 60 * 60 * 24;\n      var previousDate = new Date(currentDate.getTime() - oneDayInMilliseconds);\n      var daysAgo = Math.abs(Math.floor((selectedDateFormat - previousDate) / (1000 * 60 * 60 * 24))) - 1;\n      if (daysAgo == -1) {\n        return \"You have 2 days left to reach your goal. Consume Consume \" + Math.ceil(calorieGoal / 2) + \" calories per day to reach your goal by \" + selectedDate;\n      } else if (daysAgo == 0) {\n        return \"Today is the last day to reach your goal. Consume \" + Math.ceil(calorieGoal) + \".\";\n      } else {\n        return \"You missed your goal \" + daysAgo + \" day(s) ago. You needed to consume an average of \" + Math.ceil(calorieGoal / daysAgo) + \" calories per day to stay on track.\";\n      }\n    }\n  };\n  var markedDates = {};\n  if (selectedDate) {\n    markedDates[selectedDate] = {\n      selected: true,\n      marked: false,\n      selectedColor: 'black'\n    };\n  }\n  return _jsxs(View, {\n    children: [_jsx(Calendar, {\n      onDayPress: handleDayPress,\n      markedDates: markedDates\n    }), _jsxs(View, {\n      style: {\n        padding: 20\n      },\n      children: [_jsx(Text, {\n        children: \"Enter your calorie goal:\"\n      }), _jsx(TextInput, {\n        onChangeText: handleCalorieInputChange,\n        value: calorieGoal != null ? calorieGoal.toString() : '',\n        keyboardType: \"numeric\",\n        style: {\n          borderWidth: 1,\n          borderColor: 'gray',\n          padding: 9,\n          borderRadius: 5,\n          backgroundColor: '#fff',\n          color: '#000',\n          fontSize: 12\n        }\n      }), _jsx(Text, {\n        children: calculateCalories()\n      })]\n    })]\n  });\n};\nexport default CalendarComponent;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Calendar","jsx","_jsx","jsxs","_jsxs","CalendarComponent","_useState","_useState2","_slicedToArray","selectedDate","setSelectedDate","_useState3","_useState4","calorieGoal","setCalorieGoal","handleCalorieInputChange","text","parsedValue","parseFloat","replace","isNaN","handleDayPress","day","dateString","calculateCalories","currentDate","Date","selectedDateFormat","daysLeft","Math","floor","ceil","oneDayInMilliseconds","previousDate","getTime","daysAgo","abs","markedDates","selected","marked","selectedColor","children","onDayPress","style","padding","onChangeText","value","toString","keyboardType","borderWidth","borderColor","borderRadius","backgroundColor","color","fontSize"],"sources":["/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/Components/Tabs/Goal_component/CalendarComponent.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { Calendar } from 'react-native-calendars';\n\nconst CalendarComponent = () => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [calorieGoal, setCalorieGoal] = useState(null);\n\n  const handleCalorieInputChange = (text) => {\n    const parsedValue = parseFloat(text.replace(',', '.'));\n    if (!isNaN(parsedValue)) {\n      setCalorieGoal(parsedValue);\n    } else {\n      setCalorieGoal(null);\n    }\n  };\n\n  const handleDayPress = (day) => {\n    if (selectedDate === day.dateString) {\n      setSelectedDate(null);\n    } else {\n      setSelectedDate(day.dateString);\n    }\n  };\n\n\n  const calculateCalories = () => {\n    if (!calorieGoal) {\n      return 'Please enter a calorie goal';\n    }\n    if (!selectedDate) {\n      return 'Please select a date';\n    }\n\n    const currentDate = new Date();\n    const selectedDateFormat = new Date(selectedDate);\n\n    if (selectedDateFormat > currentDate) {\n      const daysLeft = Math.floor((selectedDateFormat - currentDate) / (1000 * 60 * 60 * 24));\n      if(daysLeft==0){\n        return `You have 3 days left to reach your goal. Consume ${Math.ceil(calorieGoal / 3)} calories per day to reach your goal by ${selectedDate}`;\n      }\n      else{\n        return `You have ${daysLeft+3} day(s) left to reach your goal. Consume ${Math.ceil(calorieGoal / (daysLeft + 3))} calories per day to reach your goal by ${selectedDate}`;\n      }\n    }\n\n    else {\n      const oneDayInMilliseconds = 1000 * 60 * 60 * 24;\n      const previousDate = new Date(currentDate.getTime() - oneDayInMilliseconds);\n      const daysAgo = Math.abs(Math.floor((selectedDateFormat - previousDate) / (1000 * 60 * 60 * 24))) - 1;\n      if(daysAgo ==-1){\n        return `You have 2 days left to reach your goal. Consume Consume ${Math.ceil(calorieGoal /2)} calories per day to reach your goal by ${selectedDate}`;\n      }\n      else if(daysAgo ==0){\n        return `Today is the last day to reach your goal. Consume ${Math.ceil(calorieGoal)}.`;\n      }\n      else {\n        return `You missed your goal ${daysAgo} day(s) ago. You needed to consume an average of ${Math.ceil(calorieGoal/daysAgo)} calories per day to stay on track.`;\n      }\n    }\n  };\n\n  const markedDates = {};\n  if (selectedDate) {\n    markedDates[selectedDate] = { selected: true, marked: false, selectedColor: 'black' };\n  }\n\n  return (\n    <View>\n      <Calendar onDayPress={handleDayPress} markedDates={markedDates} />\n      <View style={{ padding: 20 }}>\n        <Text>Enter your calorie goal:</Text>\n        <TextInput\n          onChangeText={handleCalorieInputChange}\n          value={calorieGoal != null ? calorieGoal.toString() : ''}\n          keyboardType=\"numeric\"\n          style={{\n            borderWidth: 1,\n            borderColor: 'gray',\n            padding: 9,\n            borderRadius: 5,\n            backgroundColor: '#fff',\n            color: '#000',\n            fontSize: 12,\n          }}\n        />\n\n        <Text>{calculateCalories()}</Text>\n      </View>\n    </View>\n  );\n};\n\nexport default CalendarComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
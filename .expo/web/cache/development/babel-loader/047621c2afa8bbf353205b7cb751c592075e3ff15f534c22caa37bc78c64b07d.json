{"ast":null,"code":"import React, { useMemo } from 'react';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport Animated from 'react-native-reanimated';\nimport useCircleValues from \"../../hooks/useCircleValues\";\nimport COLORS from \"../../utils/colors\";\nimport CircleGradient from \"../circleGradient\";\nimport DashedCircle from \"../dashedCircle\";\nimport styles from \"./styles\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar ProgressCircle = function ProgressCircle(_ref) {\n  var _ref$circleBackground = _ref.circleBackgroundColor,\n    circleBackgroundColor = _ref$circleBackground === void 0 ? COLORS.TRANSPARENT : _ref$circleBackground,\n    _ref$radius = _ref.radius,\n    radius = _ref$radius === void 0 ? 60 : _ref$radius,\n    _ref$strokeLinecap = _ref.strokeLinecap,\n    strokeLinecap = _ref$strokeLinecap === void 0 ? 'round' : _ref$strokeLinecap,\n    _ref$activeStrokeColo = _ref.activeStrokeColor,\n    activeStrokeColor = _ref$activeStrokeColo === void 0 ? COLORS.GREEN : _ref$activeStrokeColo,\n    _ref$activeStrokeSeco = _ref.activeStrokeSecondaryColor,\n    activeStrokeSecondaryColor = _ref$activeStrokeSeco === void 0 ? null : _ref$activeStrokeSeco,\n    _ref$activeStrokeWidt = _ref.activeStrokeWidth,\n    activeStrokeWidth = _ref$activeStrokeWidt === void 0 ? 10 : _ref$activeStrokeWidt,\n    _ref$inActiveStrokeCo = _ref.inActiveStrokeColor,\n    inActiveStrokeColor = _ref$inActiveStrokeCo === void 0 ? COLORS.BLACK_30 : _ref$inActiveStrokeCo,\n    _ref$inActiveStrokeWi = _ref.inActiveStrokeWidth,\n    inActiveStrokeWidth = _ref$inActiveStrokeWi === void 0 ? 10 : _ref$inActiveStrokeWi,\n    _ref$inActiveStrokeOp = _ref.inActiveStrokeOpacity,\n    inActiveStrokeOpacity = _ref$inActiveStrokeOp === void 0 ? 1 : _ref$inActiveStrokeOp,\n    dashedStrokeConfig = _ref.dashedStrokeConfig,\n    animatedCircleProps = _ref.animatedCircleProps;\n  var viewBox = useMemo(function () {\n    return radius + Math.max(activeStrokeWidth, inActiveStrokeWidth);\n  }, [radius, activeStrokeWidth, inActiveStrokeWidth]);\n  var _useCircleValues = useCircleValues({\n      radius: radius,\n      activeStrokeWidth: activeStrokeWidth,\n      inActiveStrokeWidth: inActiveStrokeWidth\n    }),\n    inactiveCircleRadius = _useCircleValues.inactiveCircleRadius,\n    activeCircleRadius = _useCircleValues.activeCircleRadius,\n    circleCircumference = _useCircleValues.circleCircumference;\n  var maskId = useMemo(function () {\n    return dashedStrokeConfig && (dashedStrokeConfig === null || dashedStrokeConfig === void 0 ? void 0 : dashedStrokeConfig.count) > 0 && (dashedStrokeConfig === null || dashedStrokeConfig === void 0 ? void 0 : dashedStrokeConfig.width) > 0 ? 'url(#dashed-circle)' : undefined;\n  }, [dashedStrokeConfig]);\n  var strokeColor = useMemo(function () {\n    return activeStrokeSecondaryColor ? 'url(#grad)' : activeStrokeColor;\n  }, [activeStrokeSecondaryColor, activeStrokeColor]);\n  return React.createElement(Svg, {\n    testID: \"progress-circle\",\n    width: radius * 2,\n    height: radius * 2,\n    viewBox: \"0 0 \" + viewBox * 2 + \" \" + viewBox * 2,\n    style: styles.svg\n  }, React.createElement(CircleGradient, {\n    activeStrokeColor: activeStrokeColor,\n    activeStrokeSecondaryColor: activeStrokeSecondaryColor\n  }), React.createElement(DashedCircle, {\n    circleCircumference: circleCircumference,\n    inActiveStrokeWidth: inActiveStrokeWidth,\n    activeStrokeWidth: activeStrokeWidth,\n    inactiveCircleRadius: inactiveCircleRadius,\n    activeCircleRadius: activeCircleRadius,\n    dashedStrokeConfig: dashedStrokeConfig\n  }), React.createElement(G, {\n    mask: maskId\n  }, React.createElement(Circle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: inActiveStrokeColor,\n    strokeWidth: inActiveStrokeWidth,\n    r: inactiveCircleRadius,\n    fill: circleBackgroundColor,\n    strokeOpacity: inActiveStrokeOpacity\n  }), React.createElement(AnimatedCircle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: strokeColor,\n    strokeWidth: activeStrokeWidth,\n    r: activeCircleRadius,\n    fill: COLORS.TRANSPARENT,\n    strokeDasharray: circleCircumference,\n    strokeLinecap: strokeLinecap,\n    animatedProps: animatedCircleProps\n  })));\n};\nexport default ProgressCircle;","map":{"version":3,"names":["React","useMemo","Svg","G","Circle","Animated","useCircleValues","COLORS","CircleGradient","DashedCircle","styles","AnimatedCircle","createAnimatedComponent","ProgressCircle","_ref","_ref$circleBackground","circleBackgroundColor","TRANSPARENT","_ref$radius","radius","_ref$strokeLinecap","strokeLinecap","_ref$activeStrokeColo","activeStrokeColor","GREEN","_ref$activeStrokeSeco","activeStrokeSecondaryColor","_ref$activeStrokeWidt","activeStrokeWidth","_ref$inActiveStrokeCo","inActiveStrokeColor","BLACK_30","_ref$inActiveStrokeWi","inActiveStrokeWidth","_ref$inActiveStrokeOp","inActiveStrokeOpacity","dashedStrokeConfig","animatedCircleProps","viewBox","Math","max","_useCircleValues","inactiveCircleRadius","activeCircleRadius","circleCircumference","maskId","count","width","undefined","strokeColor","createElement","testID","height","style","svg","mask","cx","cy","stroke","strokeWidth","r","fill","strokeOpacity","strokeDasharray","animatedProps"],"sources":["C:\\Users\\jenli\\csula-cs3337swe-202301Group5-repo\\node_modules\\react-native-circular-progress-indicator\\lib\\module\\components\\progressCircle\\index.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport Animated from 'react-native-reanimated';\n\nimport useCircleValues from '../../hooks/useCircleValues';\nimport COLORS from '../../utils/colors';\nimport type { ProgressCircleProps } from '../../types';\nimport CircleGradient from '../circleGradient';\nimport DashedCircle from '../dashedCircle';\n\nimport styles from './styles';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nconst ProgressCircle: React.FC<ProgressCircleProps> = ({\n  circleBackgroundColor = COLORS.TRANSPARENT,\n  radius = 60,\n  strokeLinecap = 'round',\n  activeStrokeColor = COLORS.GREEN,\n  activeStrokeSecondaryColor = null,\n  activeStrokeWidth = 10,\n  inActiveStrokeColor = COLORS.BLACK_30,\n  inActiveStrokeWidth = 10,\n  inActiveStrokeOpacity = 1,\n  dashedStrokeConfig,\n  animatedCircleProps,\n}: ProgressCircleProps) => {\n  const viewBox = useMemo(\n    () => radius + Math.max(activeStrokeWidth, inActiveStrokeWidth),\n    [radius, activeStrokeWidth, inActiveStrokeWidth]\n  );\n  const { inactiveCircleRadius, activeCircleRadius, circleCircumference } =\n    useCircleValues({\n      radius,\n      activeStrokeWidth,\n      inActiveStrokeWidth,\n    });\n\n  const maskId = useMemo(\n    () =>\n      dashedStrokeConfig &&\n      dashedStrokeConfig?.count > 0 &&\n      dashedStrokeConfig?.width > 0\n        ? 'url(#dashed-circle)'\n        : undefined,\n    [dashedStrokeConfig]\n  );\n\n  const strokeColor = useMemo(\n    () => (activeStrokeSecondaryColor ? 'url(#grad)' : activeStrokeColor),\n    [activeStrokeSecondaryColor, activeStrokeColor]\n  );\n\n  return (\n    <Svg\n      testID=\"progress-circle\"\n      width={radius * 2}\n      height={radius * 2}\n      viewBox={`0 0 ${viewBox * 2} ${viewBox * 2}`}\n      style={styles.svg}>\n      <CircleGradient\n        activeStrokeColor={activeStrokeColor}\n        activeStrokeSecondaryColor={activeStrokeSecondaryColor}\n      />\n      <DashedCircle\n        circleCircumference={circleCircumference}\n        inActiveStrokeWidth={inActiveStrokeWidth}\n        activeStrokeWidth={activeStrokeWidth}\n        inactiveCircleRadius={inactiveCircleRadius}\n        activeCircleRadius={activeCircleRadius}\n        dashedStrokeConfig={dashedStrokeConfig}\n      />\n      <G mask={maskId}>\n        <Circle\n          cx=\"50%\"\n          cy=\"50%\"\n          stroke={inActiveStrokeColor}\n          strokeWidth={inActiveStrokeWidth}\n          r={inactiveCircleRadius}\n          fill={circleBackgroundColor}\n          strokeOpacity={inActiveStrokeOpacity}\n        />\n        <AnimatedCircle\n          cx=\"50%\"\n          cy=\"50%\"\n          stroke={strokeColor}\n          strokeWidth={activeStrokeWidth}\n          r={activeCircleRadius}\n          fill={COLORS.TRANSPARENT}\n          strokeDasharray={circleCircumference}\n          strokeLinecap={strokeLinecap}\n          animatedProps={animatedCircleProps}\n        />\n      </G>\n    </Svg>\n  );\n};\n\nexport default ProgressCircle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
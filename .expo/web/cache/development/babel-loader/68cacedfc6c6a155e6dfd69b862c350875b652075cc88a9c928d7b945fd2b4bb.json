{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { useRoute } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar FoodInput = function FoodInput() {\n  var route = useRoute();\n  var foodId = route.params.foodId;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    food = _useState2[0],\n    setFood = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    weight = _useState4[0],\n    setWeight = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    nutritionFacts = _useState6[0],\n    setNutritionFacts = _useState6[1];\n  useEffect(function () {\n    var fetchFoodInput = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var apiKey = 'sd8DWPmBSnFocMzJvTzQ6JcE1vHRxsabdd08JOC8';\n          var endpoint = \"https://api.nal.usda.gov/fdc/v1/food/\" + foodId + \"?api_key=\" + apiKey;\n          var response = yield axios.get(endpoint);\n          setFood(response.data);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setFood(null);\n        }\n      });\n      return function fetchFoodInput() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchFoodInput();\n  }, [foodId]);\n  var getNutrientAmount = function getNutrientAmount(nutrientNames) {\n    var amount = 0;\n    nutrientNames.forEach(function (name) {\n      var nutrient = food.foodNutrients.find(function (n) {\n        return n.name && n.name.toLowerCase() === name.toLowerCase();\n      });\n      if (nutrient) {\n        amount += nutrient.amount;\n      }\n    });\n    return amount;\n  };\n  var updateNutritionFacts = function updateNutritionFacts() {\n    if (!weight || isNaN(weight) || weight <= 0) {\n      setNutritionFacts(null);\n      return;\n    }\n    var weightInGrams = parseFloat(weight);\n    var updatedNutritionFacts = {\n      calories: getNutrientAmount(['Energy, kcal']) * weightInGrams / 100,\n      carbohydrates: getNutrientAmount(['Carbohydrate, by difference', 'Carbohydrates, total']) * weightInGrams / 100,\n      protein: getNutrientAmount(['Protein, total', '1003']) * weightInGrams / 100,\n      fat: getNutrientAmount(['Total lipid (fat)', 'Fat, total']) * weightInGrams / 100\n    };\n    setNutritionFacts(updatedNutritionFacts);\n  };\n  var findNutrientByName = function findNutrientByName(nutrientNames) {\n    if (!Array.isArray(nutrientNames) || nutrientNames.length === 0) {\n      return undefined;\n    }\n    return food.foodNutrients.find(function (n) {\n      return nutrientNames.some(function (name) {\n        var _n$name;\n        return (_n$name = n.name) == null ? void 0 : _n$name.toLowerCase().includes(name.toLowerCase());\n      });\n    });\n  };\n  if (!food) {\n    return _jsx(Text, {\n      children: \"Loading...\"\n    });\n  }\n  return _jsx(NutritionFactLabel, {\n    food: food,\n    weight: weight,\n    setWeight: setWeight,\n    updateNutritionFacts: updateNutritionFacts,\n    nutritionFacts: nutritionFacts\n  });\n};\nvar NutritionFactLabel = function NutritionFactLabel(_ref2) {\n  var food = _ref2.food,\n    weight = _ref2.weight,\n    setWeight = _ref2.setWeight,\n    updateNutritionFacts = _ref2.updateNutritionFacts,\n    nutritionFacts = _ref2.nutritionFacts;\n  var selectedNutrientIds = [1008, 1004, 1258, 1259, 1003, 1093, 1005, 1079, 2000, 1003, 1114, 1087, 1089, 1092];\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.description,\n        children: food.description\n      }), _jsxs(View, {\n        style: styles.weightInputContainer,\n        children: [_jsx(Text, {\n          children: \"Enter weight (g):\"\n        }), _jsx(TextInput, {\n          value: weight,\n          onChangeText: setWeight,\n          onSubmitEditing: function onSubmitEditing() {\n            updateNutritionFacts();\n            Keyboard.dismiss();\n          },\n          style: styles.weightInput,\n          placeholder: \"Enter weight in grams\"\n        })]\n      }), _jsx(Text, {\n        style: styles.title,\n        children: \"Nutrition Facts\"\n      }), food.foodNutrients.filter(function (nutrient) {\n        return selectedNutrientIds.includes(nutrient.nutrient.id);\n      }).map(function (nutrient) {\n        return _jsxs(View, {\n          style: styles.nutrientContainer,\n          children: [_jsxs(Text, {\n            style: styles.nutrientLabel,\n            children: [nutrient.nutrient.name, \":\"]\n          }), _jsx(Text, {\n            style: styles.nutrientValue,\n            children: nutrient.amount\n          })]\n        }, nutrient.nutrient.id);\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 30,\n    backgroundColor: '#fff',\n    borderWidth: 1,\n    borderColor: 'black'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 20\n  },\n  description: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  nutrientContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 5,\n    paddingBottom: 5,\n    borderBottomWidth: 1,\n    borderBottomColor: 'black'\n  },\n  nutrientLabel: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  nutrientValue: {\n    fontSize: 18\n  },\n  weightInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20\n  },\n  weightInput: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    width: 150,\n    backgroundColor: 'white',\n    paddingLeft: 5,\n    marginLeft: 10\n  }\n});\nexport default FoodInput;","map":{"version":3,"names":["React","useState","useEffect","axios","View","Text","TextInput","ScrollView","StyleSheet","Keyboard","useRoute","jsx","_jsx","jsxs","_jsxs","FoodInput","route","foodId","params","_useState","_useState2","_slicedToArray","food","setFood","_useState3","_useState4","weight","setWeight","_useState5","_useState6","nutritionFacts","setNutritionFacts","fetchFoodInput","_ref","_asyncToGenerator","apiKey","endpoint","response","get","data","error","console","apply","arguments","getNutrientAmount","nutrientNames","amount","forEach","name","nutrient","foodNutrients","find","n","toLowerCase","updateNutritionFacts","isNaN","weightInGrams","parseFloat","updatedNutritionFacts","calories","carbohydrates","protein","fat","findNutrientByName","Array","isArray","length","undefined","some","_n$name","includes","children","NutritionFactLabel","_ref2","selectedNutrientIds","style","styles","container","description","weightInputContainer","value","onChangeText","onSubmitEditing","dismiss","weightInput","placeholder","title","filter","id","map","nutrientContainer","nutrientLabel","nutrientValue","create","padding","backgroundColor","borderWidth","borderColor","fontSize","fontWeight","textAlign","marginBottom","flexDirection","justifyContent","paddingBottom","borderBottomWidth","borderBottomColor","alignItems","height","width","paddingLeft","marginLeft"],"sources":["C:/Users/jenli/csula-cs3337swe-202301Group5-repo/Components/Tabs/LogPage_component/FoodInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { View, Text, TextInput, ScrollView, StyleSheet, Keyboard } from 'react-native';\r\nimport { useRoute } from '@react-navigation/native';\r\n\r\n\r\nconst FoodInput = () => {\r\n  const route = useRoute();\r\n  const { foodId } = route.params;\r\n  const [food, setFood] = useState(null);\r\n  const [weight, setWeight] = useState('');\r\n  const [nutritionFacts, setNutritionFacts] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetchFoodInput = async () => {\r\n      try {\r\n        const apiKey = 'sd8DWPmBSnFocMzJvTzQ6JcE1vHRxsabdd08JOC8';\r\n        const endpoint = `https://api.nal.usda.gov/fdc/v1/food/${foodId}?api_key=${apiKey}`;\r\n        const response = await axios.get(endpoint);\r\n         setFood(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setFood(null);\r\n      }\r\n    };\r\n  \r\n    fetchFoodInput();\r\n  }, [foodId]);\r\n  \r\n\r\n  const getNutrientAmount = (nutrientNames) => {\r\n    let amount = 0;\r\n    nutrientNames.forEach((name) => {\r\n      const nutrient = food.foodNutrients.find((n) => n.name && n.name.toLowerCase() === name.toLowerCase());\r\n      if (nutrient) {\r\n        amount += nutrient.amount;\r\n        \r\n      }\r\n    });\r\n    return amount;\r\n  };\r\n  \r\n\r\n  \r\n  const updateNutritionFacts = () => {\r\n    if (!weight || isNaN(weight) || weight <= 0) {\r\n      setNutritionFacts(null);\r\n      return;\r\n    }\r\n  \r\n    const weightInGrams = parseFloat(weight);\r\n    const updatedNutritionFacts = {\r\n      calories: (getNutrientAmount(['Energy, kcal']) * weightInGrams) / 100,\r\n      carbohydrates: (getNutrientAmount(['Carbohydrate, by difference', 'Carbohydrates, total']) * weightInGrams) / 100,\r\n      protein: (getNutrientAmount(['Protein, total', '1003']) * weightInGrams) / 100,\r\n      fat: (getNutrientAmount(['Total lipid (fat)', 'Fat, total']) * weightInGrams) / 100,\r\n    };\r\n  \r\n   \r\n    setNutritionFacts(updatedNutritionFacts);\r\n  };\r\n  \r\n   \r\n\r\n  const findNutrientByName = (nutrientNames) => {\r\n    if (!Array.isArray(nutrientNames) || nutrientNames.length === 0) {\r\n      return undefined;\r\n    }\r\n  \r\n    return food.foodNutrients.find((n) =>\r\n      nutrientNames.some((name) => n.name?.toLowerCase().includes(name.toLowerCase()))\r\n    );\r\n  };\r\n  \r\n  \r\n\r\n  if (!food) {\r\n    return <Text>Loading...</Text>;\r\n  }\r\n\r\n  return (\r\n    <NutritionFactLabel\r\n      food={food}\r\n      weight={weight}\r\n      setWeight={setWeight}\r\n      updateNutritionFacts={updateNutritionFacts}\r\n      nutritionFacts={nutritionFacts}\r\n    />\r\n  );\r\n};\r\n\r\n  const NutritionFactLabel = ({ food, weight, setWeight, updateNutritionFacts, nutritionFacts }) => {\r\n    const selectedNutrientIds = [\r\n      1008, // Energy (kcal)\r\n      1004, // Total lipid (fat)\r\n      1258, // Fatty acids, total saturated\r\n      1259, // Fatty acids, total trans\r\n      1003, // Cholesterol\r\n      1093, // Sodium, Na\r\n      1005, // Carbohydrate, by difference\r\n      1079, // Fiber, total dietary\r\n      2000, // Sugars, total including NLEA\r\n      1003, // Protein\r\n      1114, // Vitamin D (D2 + D3)\r\n      1087, // Calcium, Ca\r\n      1089, // Iron, Fe\r\n      1092, // Potassium, K\r\n    ];\r\n  \r\n \r\n    return (\r\n      <ScrollView>\r\n        <View style={styles.container}>\r\n          \r\n        <Text style={styles.description}>{food.description}</Text>\r\n          \r\n                  \r\n          <View style={styles.weightInputContainer}>\r\n            <Text>Enter weight (g):</Text>\r\n            <TextInput\r\n              value={weight}\r\n              onChangeText={setWeight}\r\n              onSubmitEditing={() => {\r\n                updateNutritionFacts();\r\n                Keyboard.dismiss();\r\n              }}\r\n              style={styles.weightInput}\r\n              placeholder=\"Enter weight in grams\"\r\n            />\r\n          </View>\r\n\r\n         {/*  \r\n         \r\n         ignore this it won't update calories based on weight inputed  \r\n         \r\n         {nutritionFacts ? (\r\n            <>\r\n              <Text style={styles.nutrient}>Calories: {nutritionFacts.calories.toFixed(2)}</Text>\r\n              <Text style={styles.nutrient}>\r\n                Carbohydrates: {nutritionFacts.carbohydrates.toFixed(2)}g\r\n              </Text>\r\n              <Text style={styles.nutrient}>Protein: {nutritionFacts.protein.toFixed(2)}g</Text>\r\n              <Text style={styles.nutrient}>Fat: {nutritionFacts.fat.toFixed(2)}g</Text>\r\n            </>\r\n          ) : (\r\n            <Text></Text>\r\n          )}\r\n\r\n          */}\r\n         \r\n         \r\n         <Text style={styles.title}>Nutrition Facts</Text>\r\n  \r\n         {food.foodNutrients\r\n  .filter((nutrient) => selectedNutrientIds.includes(nutrient.nutrient.id))\r\n  .map((nutrient) => (\r\n    <View key={nutrient.nutrient.id} style={styles.nutrientContainer}>\r\n      <Text style={styles.nutrientLabel}>{nutrient.nutrient.name}:</Text>\r\n      <Text style={styles.nutrientValue}>{nutrient.amount}</Text>\r\n    </View>\r\n\r\n\r\n))}\r\n\r\n  \r\n\r\n        </View>\r\n      </ScrollView>\r\n    );\r\n  };\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      padding: 30,\r\n      backgroundColor: '#fff',\r\n      borderWidth: 1,\r\n      borderColor: 'black',\r\n    },\r\n    title: {\r\n      fontSize: 24,\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n      marginBottom: 20,\r\n    },\r\n    description: {\r\n      fontSize: 24,\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n      marginBottom: 10,\r\n    },\r\n    nutrientContainer: {\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      marginBottom: 5,\r\n      paddingBottom: 5,\r\n      borderBottomWidth: 1,\r\n      borderBottomColor: 'black',\r\n    },\r\n    nutrientLabel: {\r\n      fontSize: 18,\r\n      fontWeight: 'bold',\r\n            \r\n    },\r\n    nutrientValue: {\r\n      fontSize: 18,\r\n      \r\n    },\r\n    weightInputContainer: {\r\n      flexDirection: 'row',\r\n      alignItems: 'center',\r\n      marginBottom: 20,\r\n    },\r\n    weightInput: {\r\n      height: 40,\r\n      borderColor: 'gray',\r\n      borderWidth: 1,\r\n      width: 150,\r\n      backgroundColor: 'white',\r\n      paddingLeft: 5,\r\n      marginLeft: 10,\r\n    },\r\n  });\r\n  \r\n  \r\n  export default FoodInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
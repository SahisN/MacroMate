{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport CircularProgress from 'react-native-circular-progress-indicator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MacroNutrients = function MacroNutrients() {\n  var _useState = useState('0'),\n    _useState2 = _slicedToArray(_useState, 2),\n    protein = _useState2[0],\n    setProtein = _useState2[1];\n  var _useState3 = useState('0'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    carbs = _useState4[0],\n    setCarbs = _useState4[1];\n  var _useState5 = useState('0'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    fat = _useState6[0],\n    setFat = _useState6[1];\n  var updateProtein = function updateProtein(value) {\n    if (/^\\d*\\.?\\d*$/.test(value)) {\n      setProtein(value);\n    }\n  };\n  var updateCarbs = function updateCarbs(value) {\n    if (/^\\d*\\.?\\d*$/.test(value)) {\n      setCarbs(value);\n    }\n  };\n  var updateFat = function updateFat(value) {\n    if (/^\\d*\\.?\\d*$/.test(value)) {\n      setFat(value);\n    }\n  };\n  var totalCalories = useMemo(function () {\n    var p = protein ? parseFloat(protein) : 0;\n    var c = carbs ? parseFloat(carbs) : 0;\n    var f = fat ? parseFloat(fat) : 0;\n    return Math.round(p * 4 + c * 4 + f * 9);\n  }, [protein, carbs, fat]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: styles.label,\n        children: \"Protein (g)\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        onChangeText: updateProtein,\n        value: protein\n      }), _jsx(CircularProgress, {\n        value: parseFloat(protein),\n        maxValue: 200,\n        radius: 30,\n        activeStrokeColor: \"#00C2FF\",\n        inActiveStrokeColor: \"#c4c4c4\",\n        progressValueColor: \"black\"\n      })]\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: styles.label,\n        children: \"Carbohydrate (g)\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        onChangeText: updateCarbs,\n        value: carbs\n      }), _jsx(CircularProgress, {\n        value: parseFloat(carbs),\n        maxValue: 300,\n        radius: 30,\n        activeStrokeColor: \"#00C2FF\",\n        inActiveStrokeColor: \"#c4c4c4\",\n        progressValueColor: \"black\"\n      })]\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: styles.label,\n        children: \"Fat (g)\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        onChangeText: updateFat,\n        value: fat\n      }), _jsx(CircularProgress, {\n        value: parseFloat(fat),\n        maxValue: 100,\n        radius: 30,\n        activeStrokeColor: \"#00C2FF\",\n        inActiveStrokeColor: \"#c4c4c4\",\n        progressValueColor: \"black\"\n      })]\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: styles.label,\n        children: \"Total Calories\"\n      }), _jsx(Text, {\n        style: [styles.value, {\n          fontWeight: 'bold',\n          marginRight: 70\n        }],\n        children: totalCalories\n      }), _jsx(CircularProgress, {\n        value: parseFloat(totalCalories),\n        maxValue: 10000,\n        radius: 40,\n        activeStrokeColor: \"#00C2FF\",\n        inActiveStrokeColor: \"#c4c4c4\",\n        progressValueColor: \"black\"\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 8,\n    padding: 16,\n    marginVertical: 16\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16\n  },\n  label: {\n    flex: 1,\n    fontWeight: 'bold',\n    fontSize: 16\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 8,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    fontSize: 16\n  },\n  value: {\n    flex: 1,\n    fontSize: 16,\n    textAlign: 'right'\n  }\n});\nexport default MacroNutrients;","map":{"version":3,"names":["React","useState","useMemo","View","Text","TextInput","StyleSheet","CircularProgress","jsx","_jsx","jsxs","_jsxs","MacroNutrients","_useState","_useState2","_slicedToArray","protein","setProtein","_useState3","_useState4","carbs","setCarbs","_useState5","_useState6","fat","setFat","updateProtein","value","test","updateCarbs","updateFat","totalCalories","p","parseFloat","c","f","Math","round","style","styles","container","children","row","label","input","keyboardType","onChangeText","maxValue","radius","activeStrokeColor","inActiveStrokeColor","progressValueColor","fontWeight","marginRight","create","borderWidth","borderColor","borderRadius","padding","marginVertical","flexDirection","alignItems","marginBottom","flex","fontSize","paddingHorizontal","paddingVertical","textAlign"],"sources":["/Users/pesos/Documents/GitHub/csula-cs3337swe-202301Group5-repo/Components/Tabs/Dashboard_component/MacroNutrients.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { View, Text, TextInput, StyleSheet } from 'react-native';\nimport CircularProgress from 'react-native-circular-progress-indicator';\n\nconst MacroNutrients = () => {\n  const [protein, setProtein] = useState('0');\n  const [carbs, setCarbs] = useState('0');\n  const [fat, setFat] = useState('0');\n\n  const updateProtein = (value) => {\n    if (/^\\d*\\.?\\d*$/.test(value)) {\n      setProtein(value);\n    }\n  };\n\n  const updateCarbs = (value) => {\n    if (/^\\d*\\.?\\d*$/.test(value)) {\n      setCarbs(value);\n    }\n  };\n\n  const updateFat = (value) => {\n    if (/^\\d*\\.?\\d*$/.test(value)) {\n      setFat(value);\n    }\n  };\n\n  const totalCalories = useMemo(() => {\n    const p = protein ? parseFloat(protein) : 0;\n    const c = carbs ? parseFloat(carbs) : 0;\n    const f = fat ? parseFloat(fat) : 0;\n    return Math.round(p * 4 + c * 4 + f * 9);\n  }, [protein, carbs, fat]);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Text style={styles.label}>Protein (g)</Text>\n        <TextInput\n          style={styles.input}\n          keyboardType=\"numeric\"\n          onChangeText={updateProtein}\n          value={protein}\n        />\n        <CircularProgress\n          value={parseFloat(protein)}\n          maxValue={200}\n          radius={30}\n          activeStrokeColor=\"#00C2FF\"\n          inActiveStrokeColor=\"#c4c4c4\"\n          progressValueColor='black'\n        />\n      </View>\n      <View style={styles.row}>\n        <Text style={styles.label}>Carbohydrate (g)</Text>\n        <TextInput\n          style={styles.input}\n          keyboardType=\"numeric\"\n          onChangeText={updateCarbs}\n          value={carbs}\n        />\n        <CircularProgress\n          value={parseFloat(carbs)}\n          maxValue={300}\n          radius={30}\n          activeStrokeColor=\"#00C2FF\"\n          inActiveStrokeColor=\"#c4c4c4\"\n          progressValueColor='black'\n        />\n      </View>\n      <View style={styles.row}>\n        <Text style={styles.label}>Fat (g)</Text>\n        <TextInput\n          style={styles.input}\n          keyboardType=\"numeric\"\n          onChangeText={updateFat}\n          value={fat}\n        />\n        <CircularProgress\n          value={parseFloat(fat)}\n          maxValue={100}\n          radius={30}\n          activeStrokeColor=\"#00C2FF\"\n          inActiveStrokeColor=\"#c4c4c4\"\n          progressValueColor='black'\n        />\n      </View>\n      <View style={styles.row}>\n        <Text style={styles.label}>Total Calories</Text>\n        <Text style={[styles.value, { fontWeight: 'bold', marginRight: 70 }]}>{totalCalories}</Text>\n        <CircularProgress\n          value={parseFloat(totalCalories)}\n          maxValue={10000}\n          radius={40}\n          activeStrokeColor=\"#00C2FF\"\n          inActiveStrokeColor=\"#c4c4c4\"\n          progressValueColor='black'\n        />\n      </View>\n\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 8,\n    padding: 16,\n    marginVertical: 16,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  label: {\n    flex: 1,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 8,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    fontSize: 16,\n  },\n  value: {\n    flex: 1,\n    fontSize: 16,\n    textAlign: 'right',\n  },\n});\n\nexport default MacroNutrients;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}